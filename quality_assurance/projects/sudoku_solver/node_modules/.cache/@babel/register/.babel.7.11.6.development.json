{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    console.log(req.body);\n    let coordinates = req.body.coordinate.split(''); // solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)\n\n    solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value);\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9uZ29vc2UiLCJjb25maWciLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJzb2x2ZXIiLCJyb3V0ZSIsInBvc3QiLCJyZXEiLCJyZXMiLCJib2R5IiwiY29vcmRpbmF0ZXMiLCJjb29yZGluYXRlIiwic3BsaXQiLCJjaGVja0NvbFBsYWNlbWVudCIsInB1enpsZSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxpQ0FBRCxDQUE1Qjs7QUFDQTs7QUFDQSxJQUFJQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCRSxNQUFsQixHLENBRUE7OztBQUVBRCxRQUFRLENBQUNFLE9BQVQsQ0FBaUJDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUE3QixFQUFvQztBQUFFQyxFQUFBQSxlQUFlLEVBQUUsSUFBbkI7QUFBeUJDLEVBQUFBLGtCQUFrQixFQUFFO0FBQTdDLENBQXBDLEVBQXdGQyxJQUF4RixDQUE2RixNQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBWixDQUFuRyxFQUNDQyxLQURELENBQ09DLEdBQUcsSUFBSUgsT0FBTyxDQUFDQyxHQUFSLENBQVlFLEdBQVosQ0FEZCxFLENBR0E7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFFOUIsTUFBSUMsTUFBTSxHQUFHLElBQUlsQixZQUFKLEVBQWI7QUFFQWlCLEVBQUFBLEdBQUcsQ0FBQ0UsS0FBSixDQUFVLFlBQVYsRUFDR0MsSUFESCxDQUNRLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ2xCWCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVMsR0FBRyxDQUFDRSxJQUFoQjtBQUNBLFFBQUlDLFdBQVcsR0FBR0gsR0FBRyxDQUFDRSxJQUFKLENBQVNFLFVBQVQsQ0FBb0JDLEtBQXBCLENBQTBCLEVBQTFCLENBQWxCLENBRmtCLENBR2xCOztBQUNBUixJQUFBQSxNQUFNLENBQUNTLGlCQUFQLENBQXlCTixHQUFHLENBQUNFLElBQUosQ0FBU0ssTUFBbEMsRUFBMENKLFdBQVcsQ0FBQyxDQUFELENBQXJELEVBQTBEQSxXQUFXLENBQUMsQ0FBRCxDQUFyRSxFQUEwRUgsR0FBRyxDQUFDRSxJQUFKLENBQVNNLEtBQW5GO0FBQ0QsR0FOSDtBQVFBWixFQUFBQSxHQUFHLENBQUNFLEtBQUosQ0FBVSxZQUFWLEVBQ0dDLElBREgsQ0FDUSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYyxDQUVuQixDQUhIO0FBSUQsQ0FoQkQiLCJzb3VyY2VSb290IjoiL1VzZXJzL2Zpbm5jai9jb2RlL2Zpbm5pYW5qL2ZyZWVjb2RlY2FtcC9xdWFsaXR5X2Fzc3VyYW5jZS9wcm9qZWN0cy9zdWRva3Vfc29sdmVyL3JvdXRlcy8iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFN1ZG9rdVNvbHZlciA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzL3N1ZG9rdS1zb2x2ZXIuanMnKTtcbid1c2Ugc3RyaWN0JztcbmxldCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKVxucmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5cbi8vIC0tLS0tLS0tLSBNb25nbyBEQiBjb25maWcgLS0tLS0tLS0tLS0tLVxuXG5tb25nb29zZS5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPLCB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlfSkudGhlbigoKSA9PiBjb25zb2xlLmxvZyhcIk1vbmdvZGIgY29ubmVjdGVkXCIpKVxuLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwcCkge1xuXG4gIGxldCBzb2x2ZXIgPSBuZXcgU3Vkb2t1U29sdmVyKCk7XG5cbiAgYXBwLnJvdXRlKCcvYXBpL2NoZWNrJylcbiAgICAucG9zdCgocmVxLCByZXMpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHJlcS5ib2R5KVxuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gcmVxLmJvZHkuY29vcmRpbmF0ZS5zcGxpdCgnJylcbiAgICAgIC8vIHNvbHZlci5jaGVja1Jvd1BsYWNlbWVudChyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpXG4gICAgICBzb2x2ZXIuY2hlY2tDb2xQbGFjZW1lbnQocmVxLmJvZHkucHV6emxlLCBjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIHJlcS5ib2R5LnZhbHVlKVxuICAgIH0pO1xuXG4gIGFwcC5yb3V0ZSgnL2FwaS9zb2x2ZScpXG4gICAgLnBvc3QoKHJlcSwgcmVzKSA9PiB7XG5cbiAgICB9KTtcbn07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "coordinates",
        "coordinate",
        "split",
        "checkColPlacement",
        "puzzle",
        "value"
      ],
      "mappings": "AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iCAAD,CAA5B;;AACA;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBE,MAAlB,G,CAEA;;;AAEAD,QAAQ,CAACE,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,KAA7B,EAAoC;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAApC,EAAwFC,IAAxF,CAA6F,MAAMC,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAnG,EACCC,KADD,CACOC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CADd,E,CAGA;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAE9B,MAAIC,MAAM,GAAG,IAAIlB,YAAJ,EAAb;AAEAiB,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClBX,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACE,IAAhB;AACA,QAAIC,WAAW,GAAGH,GAAG,CAACE,IAAJ,CAASE,UAAT,CAAoBC,KAApB,CAA0B,EAA1B,CAAlB,CAFkB,CAGlB;;AACAR,IAAAA,MAAM,CAACS,iBAAP,CAAyBN,GAAG,CAACE,IAAJ,CAASK,MAAlC,EAA0CJ,WAAW,CAAC,CAAD,CAArD,EAA0DA,WAAW,CAAC,CAAD,CAArE,EAA0EH,GAAG,CAACE,IAAJ,CAASM,KAAnF;AACD,GANH;AAQAZ,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc,CAEnB,CAHH;AAID,CAhBD",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      console.log(req.body)\n      let coordinates = req.body.coordinate.split('')\n      // solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)\n      solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681201656666
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65;\n    console.log(\"Row index: \" + row_index);\n    let row = puzzleString.split('').slice(row_index, row_index + 10);\n    return row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num);\n    console.log(\"Is this value already taken? \" + col_extract.some(num => num == value));\n    return col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {}\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tSb3dQbGFjZW1lbnQiLCJyb3dfbGV0dGVyIiwiY29sdW1uIiwidmFsdWUiLCJ0b1VwcGVyQ2FzZSIsImNoYXJDb2RlQXQiLCJyb3dfaW5kZXgiLCJjb25zb2xlIiwibG9nIiwicm93Iiwic3BsaXQiLCJzbGljZSIsInNvbWUiLCJpdGVtIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJjb2xfbnVtIiwiYXJyYXkiLCJjb2xfZXh0cmFjdCIsImZpbHRlciIsIl9udW0iLCJpIiwibnVtIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQU4sQ0FBbUI7QUFFakJDLEVBQUFBLFFBQVEsQ0FBQ0MsWUFBRCxFQUFlO0FBQ3JCLFFBQUlDLEdBQUcsR0FBRyxZQUFWO0FBQ0EsV0FBT0EsR0FBRyxDQUFDQyxJQUFKLENBQVNGLFlBQVQsQ0FBUDtBQUNEOztBQUVERyxFQUFBQSxpQkFBaUIsQ0FBQ0gsWUFBRCxFQUFlSSxVQUFmLEVBQTJCQyxNQUEzQixFQUFtQ0MsS0FBbkMsRUFBMEM7QUFDekRGLElBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFDRyxXQUFYLEdBQXlCQyxVQUF6QixDQUFvQyxDQUFwQyxDQUFiO0FBQ0EsUUFBSUMsU0FBUyxHQUFJTCxVQUFVLEdBQUcsRUFBOUI7QUFDQU0sSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZ0JBQWdCRixTQUE1QjtBQUNBLFFBQUlHLEdBQUcsR0FBR1osWUFBWSxDQUFDYSxLQUFiLENBQW1CLEVBQW5CLEVBQXVCQyxLQUF2QixDQUE2QkwsU0FBN0IsRUFBeUNBLFNBQVMsR0FBRyxFQUFyRCxDQUFWO0FBQ0EsV0FBT0csR0FBRyxDQUFDRyxJQUFKLENBQVVDLElBQUQsSUFBVUEsSUFBSSxJQUFJVixLQUEzQixDQUFQO0FBQ0Q7O0FBRURXLEVBQUFBLGlCQUFpQixDQUFDakIsWUFBRCxFQUFlWSxHQUFmLEVBQW9CUCxNQUFwQixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDbEQsUUFBSVksT0FBTyxHQUFHYixNQUFNLEdBQUcsQ0FBdkI7QUFDQSxRQUFJYyxLQUFLLEdBQUduQixZQUFZLENBQUNhLEtBQWIsQ0FBbUIsRUFBbkIsQ0FBWjtBQUNBLFFBQUlPLFdBQVcsR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWEsQ0FBQ0MsSUFBRCxFQUFPQyxDQUFQLEtBQWFBLENBQUMsR0FBRyxDQUFKLElBQVNMLE9BQW5DLENBQWxCO0FBQ0FSLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGtDQUFrQ1MsV0FBVyxDQUFDTCxJQUFaLENBQWlCUyxHQUFHLElBQUlBLEdBQUcsSUFBSWxCLEtBQS9CLENBQTlDO0FBQ0EsV0FBT2MsV0FBVyxDQUFDTCxJQUFaLENBQWlCUyxHQUFHLElBQUlBLEdBQUcsSUFBSWxCLEtBQS9CLENBQVA7QUFDRDs7QUFFRG1CLEVBQUFBLG9CQUFvQixDQUFDekIsWUFBRCxFQUFlWSxHQUFmLEVBQW9CUCxNQUFwQixFQUE0QkMsS0FBNUIsRUFBbUMsQ0FFdEQ7O0FBRURvQixFQUFBQSxLQUFLLENBQUMxQixZQUFELEVBQWUsQ0FFbkI7O0FBN0JnQjs7QUFnQ25CMkIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCOUIsWUFBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2Zpbm5jai9jb2RlL2Zpbm5pYW5qL2ZyZWVjb2RlY2FtcC9xdWFsaXR5X2Fzc3VyYW5jZS9wcm9qZWN0cy9zdWRva3Vfc29sdmVyL2NvbnRyb2xsZXJzLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFN1ZG9rdVNvbHZlciB7XG5cbiAgdmFsaWRhdGUocHV6emxlU3RyaW5nKSB7XG4gICAgbGV0IHJlZyA9IC9eW1xcZFxcLi9dKiQvXG4gICAgcmV0dXJuIHJlZy50ZXN0KHB1enpsZVN0cmluZylcbiAgfVxuXG4gIGNoZWNrUm93UGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93X2xldHRlciwgY29sdW1uLCB2YWx1ZSkge1xuICAgIHJvd19sZXR0ZXIgPSByb3dfbGV0dGVyLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKVxuICAgIGxldCByb3dfaW5kZXggPSAocm93X2xldHRlciAlIDY1KTtcbiAgICBjb25zb2xlLmxvZyhcIlJvdyBpbmRleDogXCIgKyByb3dfaW5kZXgpXG4gICAgbGV0IHJvdyA9IHB1enpsZVN0cmluZy5zcGxpdCgnJykuc2xpY2Uocm93X2luZGV4LCAocm93X2luZGV4ICsgMTApKVxuICAgIHJldHVybiByb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrQ29sUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93LCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IGNvbF9udW0gPSBjb2x1bW4gLSAxXG4gICAgbGV0IGFycmF5ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKVxuICAgIGxldCBjb2xfZXh0cmFjdCA9IGFycmF5LmZpbHRlcigoX251bSwgaSkgPT4gaSAlIDkgPT0gY29sX251bSlcbiAgICBjb25zb2xlLmxvZyhcIklzIHRoaXMgdmFsdWUgYWxyZWFkeSB0YWtlbj8gXCIgKyBjb2xfZXh0cmFjdC5zb21lKG51bSA9PiBudW0gPT0gdmFsdWUpKVxuICAgIHJldHVybiBjb2xfZXh0cmFjdC5zb21lKG51bSA9PiBudW0gPT0gdmFsdWUpXG4gIH1cblxuICBjaGVja1JlZ2lvblBsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvdywgY29sdW1uLCB2YWx1ZSkge1xuXG4gIH1cblxuICBzb2x2ZShwdXp6bGVTdHJpbmcpIHtcblxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vkb2t1U29sdmVyO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkRowPlacement",
        "row_letter",
        "column",
        "value",
        "toUpperCase",
        "charCodeAt",
        "row_index",
        "console",
        "log",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,YAAN,CAAmB;AAEjBC,EAAAA,QAAQ,CAACC,YAAD,EAAe;AACrB,QAAIC,GAAG,GAAG,YAAV;AACA,WAAOA,GAAG,CAACC,IAAJ,CAASF,YAAT,CAAP;AACD;;AAEDG,EAAAA,iBAAiB,CAACH,YAAD,EAAeI,UAAf,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AACzDF,IAAAA,UAAU,GAAGA,UAAU,CAACG,WAAX,GAAyBC,UAAzB,CAAoC,CAApC,CAAb;AACA,QAAIC,SAAS,GAAIL,UAAU,GAAG,EAA9B;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,SAA5B;AACA,QAAIG,GAAG,GAAGZ,YAAY,CAACa,KAAb,CAAmB,EAAnB,EAAuBC,KAAvB,CAA6BL,SAA7B,EAAyCA,SAAS,GAAG,EAArD,CAAV;AACA,WAAOG,GAAG,CAACG,IAAJ,CAAUC,IAAD,IAAUA,IAAI,IAAIV,KAA3B,CAAP;AACD;;AAEDW,EAAAA,iBAAiB,CAACjB,YAAD,EAAeY,GAAf,EAAoBP,MAApB,EAA4BC,KAA5B,EAAmC;AAClD,QAAIY,OAAO,GAAGb,MAAM,GAAG,CAAvB;AACA,QAAIc,KAAK,GAAGnB,YAAY,CAACa,KAAb,CAAmB,EAAnB,CAAZ;AACA,QAAIO,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,IAAD,EAAOC,CAAP,KAAaA,CAAC,GAAG,CAAJ,IAASL,OAAnC,CAAlB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCS,WAAW,CAACL,IAAZ,CAAiBS,GAAG,IAAIA,GAAG,IAAIlB,KAA/B,CAA9C;AACA,WAAOc,WAAW,CAACL,IAAZ,CAAiBS,GAAG,IAAIA,GAAG,IAAIlB,KAA/B,CAAP;AACD;;AAEDmB,EAAAA,oBAAoB,CAACzB,YAAD,EAAeY,GAAf,EAAoBP,MAApB,EAA4BC,KAA5B,EAAmC,CAEtD;;AAEDoB,EAAAA,KAAK,CAAC1B,YAAD,EAAe,CAEnB;;AA7BgB;;AAgCnB2B,MAAM,CAACC,OAAP,GAAiB9B,YAAjB",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 10))\n    return row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    console.log(\"Is this value already taken? \" + col_extract.some(num => num == value))\n    return col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681203450825
  }
}