{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let coordinates = req.body.coordinate.split('');\n    let taken = solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value);\n    let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false);\n    console.log(errors);\n    let conflicts = errors.map(e => e[0]);\n\n    if (errors.length > 0) {\n      return res.json({\n        valid: false,\n        conflicts: conflicts\n      });\n    }\n\n    return res.json({\n      valid: true\n    });\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9uZ29vc2UiLCJjb25maWciLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJzb2x2ZXIiLCJyb3V0ZSIsInBvc3QiLCJyZXEiLCJyZXMiLCJjb29yZGluYXRlcyIsImJvZHkiLCJjb29yZGluYXRlIiwic3BsaXQiLCJ0YWtlbiIsImNoZWNrRXhhY3RTcXVhcmUiLCJwdXp6bGUiLCJ2YWx1ZSIsInZhbGlkX3JvdyIsImNoZWNrUm93UGxhY2VtZW50IiwidmFsaWRfY29sIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJ2YWxpZF9yZWciLCJjaGVja1JlZ2lvblBsYWNlbWVudCIsImVycm9ycyIsImZpbHRlciIsImkiLCJjb25mbGljdHMiLCJtYXAiLCJlIiwibGVuZ3RoIiwianNvbiIsInZhbGlkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxpQ0FBRCxDQUE1Qjs7QUFDQTs7QUFDQSxJQUFJQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCRSxNQUFsQixHLENBRUE7OztBQUVBRCxRQUFRLENBQUNFLE9BQVQsQ0FBaUJDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUE3QixFQUFvQztBQUFFQyxFQUFBQSxlQUFlLEVBQUUsSUFBbkI7QUFBeUJDLEVBQUFBLGtCQUFrQixFQUFFO0FBQTdDLENBQXBDLEVBQXdGQyxJQUF4RixDQUE2RixNQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBWixDQUFuRyxFQUNDQyxLQURELENBQ09DLEdBQUcsSUFBSUgsT0FBTyxDQUFDQyxHQUFSLENBQVlFLEdBQVosQ0FEZCxFLENBR0E7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFFOUIsTUFBSUMsTUFBTSxHQUFHLElBQUlsQixZQUFKLEVBQWI7QUFFQWlCLEVBQUFBLEdBQUcsQ0FBQ0UsS0FBSixDQUFVLFlBQVYsRUFDR0MsSUFESCxDQUNRLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ2xCLFFBQUlDLFdBQVcsR0FBR0YsR0FBRyxDQUFDRyxJQUFKLENBQVNDLFVBQVQsQ0FBb0JDLEtBQXBCLENBQTBCLEVBQTFCLENBQWxCO0FBQ0EsUUFBSUMsS0FBSyxHQUFHVCxNQUFNLENBQUNVLGdCQUFQLENBQXdCUCxHQUFHLENBQUNHLElBQUosQ0FBU0ssTUFBakMsRUFBeUNOLFdBQVcsQ0FBQyxDQUFELENBQXBELEVBQXlEQSxXQUFXLENBQUMsQ0FBRCxDQUFwRSxFQUF5RUYsR0FBRyxDQUFDRyxJQUFKLENBQVNNLEtBQWxGLENBQVo7QUFDQSxRQUFJQyxTQUFTLEdBQUcsQ0FBQyxLQUFELEVBQVFiLE1BQU0sQ0FBQ2MsaUJBQVAsQ0FBeUJYLEdBQUcsQ0FBQ0csSUFBSixDQUFTSyxNQUFsQyxFQUEwQ04sV0FBVyxDQUFDLENBQUQsQ0FBckQsRUFBMERBLFdBQVcsQ0FBQyxDQUFELENBQXJFLEVBQTBFRixHQUFHLENBQUNHLElBQUosQ0FBU00sS0FBbkYsQ0FBUixDQUFoQjtBQUNBLFFBQUlHLFNBQVMsR0FBRyxDQUFDLFFBQUQsRUFBV2YsTUFBTSxDQUFDZ0IsaUJBQVAsQ0FBeUJiLEdBQUcsQ0FBQ0csSUFBSixDQUFTSyxNQUFsQyxFQUEwQ04sV0FBVyxDQUFDLENBQUQsQ0FBckQsRUFBMERBLFdBQVcsQ0FBQyxDQUFELENBQXJFLEVBQTBFRixHQUFHLENBQUNHLElBQUosQ0FBU00sS0FBbkYsQ0FBWCxDQUFoQjtBQUNBLFFBQUlLLFNBQVMsR0FBRyxDQUFDLFFBQUQsRUFBV2pCLE1BQU0sQ0FBQ2tCLG9CQUFQLENBQTRCZixHQUFHLENBQUNHLElBQUosQ0FBU0ssTUFBckMsRUFBNkNOLFdBQVcsQ0FBQyxDQUFELENBQXhELEVBQTZEQSxXQUFXLENBQUMsQ0FBRCxDQUF4RSxFQUE2RUYsR0FBRyxDQUFDRyxJQUFKLENBQVNNLEtBQXRGLENBQVgsQ0FBaEI7QUFDQSxRQUFJTyxNQUFNLEdBQUcsQ0FBQ04sU0FBRCxFQUFZRSxTQUFaLEVBQXVCRSxTQUF2QixFQUFrQ0csTUFBbEMsQ0FBeUNDLENBQUMsSUFBSUEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLEtBQXRELENBQWI7QUFDQTVCLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZeUIsTUFBWjtBQUNBLFFBQUlHLFNBQVMsR0FBR0gsTUFBTSxDQUFDSSxHQUFQLENBQVdDLENBQUMsSUFBSUEsQ0FBQyxDQUFDLENBQUQsQ0FBakIsQ0FBaEI7O0FBQ0EsUUFBSUwsTUFBTSxDQUFDTSxNQUFQLEdBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLGFBQU9yQixHQUFHLENBQUNzQixJQUFKLENBQVM7QUFBRUMsUUFBQUEsS0FBSyxFQUFFLEtBQVQ7QUFBZ0JMLFFBQUFBLFNBQVMsRUFBRUE7QUFBM0IsT0FBVCxDQUFQO0FBQ0Q7O0FBQ0QsV0FBT2xCLEdBQUcsQ0FBQ3NCLElBQUosQ0FBUztBQUFFQyxNQUFBQSxLQUFLLEVBQUU7QUFBVCxLQUFULENBQVA7QUFDRCxHQWRIO0FBZ0JBNUIsRUFBQUEsR0FBRyxDQUFDRSxLQUFKLENBQVUsWUFBVixFQUNHQyxJQURILENBQ1EsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWMsQ0FFbkIsQ0FISDtBQUlELENBeEJEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9maW5uY2ovY29kZS9maW5uaWFuai9mcmVlY29kZWNhbXAvcXVhbGl0eV9hc3N1cmFuY2UvcHJvamVjdHMvc3Vkb2t1X3NvbHZlci9yb3V0ZXMvIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTdWRva3VTb2x2ZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9zdWRva3Utc29sdmVyLmpzJyk7XG4ndXNlIHN0cmljdCc7XG5sZXQgbW9uZ29vc2UgPSByZXF1aXJlKFwibW9uZ29vc2VcIilcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xuXG4vLyAtLS0tLS0tLS0gTW9uZ28gREIgY29uZmlnIC0tLS0tLS0tLS0tLS1cblxubW9uZ29vc2UuY29ubmVjdChwcm9jZXNzLmVudi5NT05HTywgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZX0pLnRoZW4oKCkgPT4gY29uc29sZS5sb2coXCJNb25nb2RiIGNvbm5lY3RlZFwiKSlcbi5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcblxuICBsZXQgc29sdmVyID0gbmV3IFN1ZG9rdVNvbHZlcigpO1xuXG4gIGFwcC5yb3V0ZSgnL2FwaS9jaGVjaycpXG4gICAgLnBvc3QoKHJlcSwgcmVzKSA9PiB7XG4gICAgICBsZXQgY29vcmRpbmF0ZXMgPSByZXEuYm9keS5jb29yZGluYXRlLnNwbGl0KCcnKVxuICAgICAgbGV0IHRha2VuID0gc29sdmVyLmNoZWNrRXhhY3RTcXVhcmUocmVxLmJvZHkucHV6emxlLCBjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIHJlcS5ib2R5LnZhbHVlKVxuICAgICAgbGV0IHZhbGlkX3JvdyA9IFtcInJvd1wiLCBzb2x2ZXIuY2hlY2tSb3dQbGFjZW1lbnQocmVxLmJvZHkucHV6emxlLCBjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIHJlcS5ib2R5LnZhbHVlKV1cbiAgICAgIGxldCB2YWxpZF9jb2wgPSBbXCJjb2x1bW5cIiwgc29sdmVyLmNoZWNrQ29sUGxhY2VtZW50KHJlcS5ib2R5LnB1enpsZSwgY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzFdLCByZXEuYm9keS52YWx1ZSldXG4gICAgICBsZXQgdmFsaWRfcmVnID0gW1wicmVnaW9uXCIsIHNvbHZlci5jaGVja1JlZ2lvblBsYWNlbWVudChyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpXVxuICAgICAgbGV0IGVycm9ycyA9IFt2YWxpZF9yb3csIHZhbGlkX2NvbCwgdmFsaWRfcmVnXS5maWx0ZXIoaSA9PiBpWzFdID09IGZhbHNlKVxuICAgICAgY29uc29sZS5sb2coZXJyb3JzKVxuICAgICAgbGV0IGNvbmZsaWN0cyA9IGVycm9ycy5tYXAoZSA9PiBlWzBdKVxuICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7IHZhbGlkOiBmYWxzZSwgY29uZmxpY3RzOiBjb25mbGljdHMgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXMuanNvbih7IHZhbGlkOiB0cnVlIH0pXG4gICAgfSk7XG5cbiAgYXBwLnJvdXRlKCcvYXBpL3NvbHZlJylcbiAgICAucG9zdCgocmVxLCByZXMpID0+IHtcblxuICAgIH0pO1xufTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "coordinates",
        "body",
        "coordinate",
        "split",
        "taken",
        "checkExactSquare",
        "puzzle",
        "value",
        "valid_row",
        "checkRowPlacement",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement",
        "errors",
        "filter",
        "i",
        "conflicts",
        "map",
        "e",
        "length",
        "json",
        "valid"
      ],
      "mappings": "AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iCAAD,CAA5B;;AACA;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBE,MAAlB,G,CAEA;;;AAEAD,QAAQ,CAACE,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,KAA7B,EAAoC;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAApC,EAAwFC,IAAxF,CAA6F,MAAMC,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAnG,EACCC,KADD,CACOC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CADd,E,CAGA;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAE9B,MAAIC,MAAM,GAAG,IAAIlB,YAAJ,EAAb;AAEAiB,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClB,QAAIC,WAAW,GAAGF,GAAG,CAACG,IAAJ,CAASC,UAAT,CAAoBC,KAApB,CAA0B,EAA1B,CAAlB;AACA,QAAIC,KAAK,GAAGT,MAAM,CAACU,gBAAP,CAAwBP,GAAG,CAACG,IAAJ,CAASK,MAAjC,EAAyCN,WAAW,CAAC,CAAD,CAApD,EAAyDA,WAAW,CAAC,CAAD,CAApE,EAAyEF,GAAG,CAACG,IAAJ,CAASM,KAAlF,CAAZ;AACA,QAAIC,SAAS,GAAG,CAAC,KAAD,EAAQb,MAAM,CAACc,iBAAP,CAAyBX,GAAG,CAACG,IAAJ,CAASK,MAAlC,EAA0CN,WAAW,CAAC,CAAD,CAArD,EAA0DA,WAAW,CAAC,CAAD,CAArE,EAA0EF,GAAG,CAACG,IAAJ,CAASM,KAAnF,CAAR,CAAhB;AACA,QAAIG,SAAS,GAAG,CAAC,QAAD,EAAWf,MAAM,CAACgB,iBAAP,CAAyBb,GAAG,CAACG,IAAJ,CAASK,MAAlC,EAA0CN,WAAW,CAAC,CAAD,CAArD,EAA0DA,WAAW,CAAC,CAAD,CAArE,EAA0EF,GAAG,CAACG,IAAJ,CAASM,KAAnF,CAAX,CAAhB;AACA,QAAIK,SAAS,GAAG,CAAC,QAAD,EAAWjB,MAAM,CAACkB,oBAAP,CAA4Bf,GAAG,CAACG,IAAJ,CAASK,MAArC,EAA6CN,WAAW,CAAC,CAAD,CAAxD,EAA6DA,WAAW,CAAC,CAAD,CAAxE,EAA6EF,GAAG,CAACG,IAAJ,CAASM,KAAtF,CAAX,CAAhB;AACA,QAAIO,MAAM,GAAG,CAACN,SAAD,EAAYE,SAAZ,EAAuBE,SAAvB,EAAkCG,MAAlC,CAAyCC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,IAAQ,KAAtD,CAAb;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAYyB,MAAZ;AACA,QAAIG,SAAS,GAAGH,MAAM,CAACI,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAjB,CAAhB;;AACA,QAAIL,MAAM,CAACM,MAAP,GAAgB,CAApB,EAAuB;AACrB,aAAOrB,GAAG,CAACsB,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE,KAAT;AAAgBL,QAAAA,SAAS,EAAEA;AAA3B,OAAT,CAAP;AACD;;AACD,WAAOlB,GAAG,CAACsB,IAAJ,CAAS;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAT,CAAP;AACD,GAdH;AAgBA5B,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc,CAEnB,CAHH;AAID,CAxBD",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let coordinates = req.body.coordinate.split('')\n      let taken = solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)\n      let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false)\n      console.log(errors)\n      let conflicts = errors.map(e => e[0])\n      if (errors.length > 0) {\n        return res.json({ valid: false, conflicts: conflicts })\n      }\n      return res.json({ valid: true })\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681219140954
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = row_letter.toUpperCase().charCodeAt(0) % 65 * 9;\n    console.log(row_multiplier + (column - 1));\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65;\n    console.log(\"Row index: \" + row_index);\n    let row = puzzleString.split('').slice(row_index, row_index + 10);\n    console.log(\"Good row value? \" + !row.some(item => item == value));\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num);\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value));\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i >= row_group * 27 && i < (row_group + 1) * 27);\n    let region = row_extract.filter((_num, i) => {\n      return i % 9 >= col_group * 3 && i % 9 <= (col_group + 1) * 3 - 1;\n    });\n    return !region.some(item => item == value);\n  }\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tFeGFjdFNxdWFyZSIsInJvd19sZXR0ZXIiLCJjb2x1bW4iLCJ2YWx1ZSIsInJvd19tdWx0aXBsaWVyIiwidG9VcHBlckNhc2UiLCJjaGFyQ29kZUF0IiwiY29uc29sZSIsImxvZyIsImNoZWNrUm93UGxhY2VtZW50Iiwicm93X2luZGV4Iiwicm93Iiwic3BsaXQiLCJzbGljZSIsInNvbWUiLCJpdGVtIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJjb2xfbnVtIiwiYXJyYXkiLCJjb2xfZXh0cmFjdCIsImZpbHRlciIsIl9udW0iLCJpIiwibnVtIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJyb3dfZ3JvdXAiLCJNYXRoIiwiZmxvb3IiLCJjb2xfZ3JvdXAiLCJyb3dfZXh0cmFjdCIsInJlZ2lvbiIsInNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsWUFBTixDQUFtQjtBQUVqQkMsRUFBQUEsUUFBUSxDQUFDQyxZQUFELEVBQWU7QUFDckIsUUFBSUMsR0FBRyxHQUFHLFlBQVY7QUFDQSxXQUFPQSxHQUFHLENBQUNDLElBQUosQ0FBU0YsWUFBVCxDQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLGdCQUFnQixDQUFDSCxZQUFELEVBQWVJLFVBQWYsRUFBMkJDLE1BQTNCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUN4RCxRQUFJQyxjQUFjLEdBQUlILFVBQVUsQ0FBQ0ksV0FBWCxHQUF5QkMsVUFBekIsQ0FBb0MsQ0FBcEMsSUFBeUMsRUFBMUMsR0FBZ0QsQ0FBckU7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlKLGNBQWMsSUFBSUYsTUFBTSxHQUFHLENBQWIsQ0FBMUI7QUFDRDs7QUFFRE8sRUFBQUEsaUJBQWlCLENBQUNaLFlBQUQsRUFBZUksVUFBZixFQUEyQkMs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R0FBaUJ0QyxZQUFqQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZmlubmNqL2NvZGUvZmlubmlhbmovZnJlZWNvZGVjYW1wL3F1YWxpdHlfYXNzdXJhbmNlL3Byb2plY3RzL3N1ZG9rdV9zb2x2ZXIvY29udHJvbGxlcnMvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU3Vkb2t1U29sdmVyIHtcblxuICB2YWxpZGF0ZShwdXp6bGVTdHJpbmcpIHtcbiAgICBsZXQgcmVnID0gL15bXFxkXFwuL10qJC9cbiAgICByZXR1cm4gcmVnLnRlc3QocHV6emxlU3RyaW5nKVxuICB9XG5cbiAgY2hlY2tFeGFjdFNxdWFyZShwdXp6bGVTdHJpbmcsIHJvd19sZXR0ZXIsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICBsZXQgcm93X211bHRpcGxpZXIgPSAocm93X2xldHRlci50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCkgJSA2NSkgKiA5XG4gICAgY29uc29sZS5sb2cocm93X211bHRpcGxpZXIgKyAoY29sdW1uIC0gMSkpXG4gIH1cblxuICBjaGVja1Jvd1BsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvd19sZXR0ZXIsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICByb3dfbGV0dGVyID0gcm93X2xldHRlci50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMClcbiAgICBsZXQgcm93X2luZGV4ID0gKHJvd19sZXR0ZXIgJSA2NSk7XG4gICAgY29uc29sZS5sb2coXCJSb3cgaW5kZXg6IFwiICsgcm93X2luZGV4KVxuICAgIGxldCByb3cgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpLnNsaWNlKHJvd19pbmRleCwgKHJvd19pbmRleCArIDEwKSlcbiAgICBjb25zb2xlLmxvZyhcIkdvb2Qgcm93IHZhbHVlPyBcIiArICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSkpXG4gICAgcmV0dXJuICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrQ29sUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93LCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IGNvbF9udW0gPSBjb2x1bW4gLSAxXG4gICAgbGV0IGFycmF5ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKVxuICAgIGxldCBjb2xfZXh0cmFjdCA9IGFycmF5LmZpbHRlcigoX251bSwgaSkgPT4gaSAlIDkgPT0gY29sX251bSlcbiAgICBjb25zb2xlLmxvZyhcIkdvb2QgY29sdW1uIHZhbHVlPyBcIiArICFjb2xfZXh0cmFjdC5zb21lKG51bSA9PiBudW0gPT0gdmFsdWUpKVxuICAgIHJldHVybiAhY29sX2V4dHJhY3Quc29tZShudW0gPT4gbnVtID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSZWdpb25QbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19ncm91cCA9IE1hdGguZmxvb3IoKHJvd19sZXR0ZXIgJSA2NSkgLyAzKTtcbiAgICBsZXQgY29sX2dyb3VwID0gTWF0aC5mbG9vcigoY29sdW1uIC0gMSkgLyAzKTtcbiAgICBsZXQgYXJyYXkgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpXG4gICAgbGV0IHJvd19leHRyYWN0ID0gYXJyYXkuZmlsdGVyKChfbnVtLCBpKSA9PiAoaSA+PSAocm93X2dyb3VwICogMjcpICYmIGkgPCAoKHJvd19ncm91cCArIDEpICogMjcpKSlcbiAgICBsZXQgcmVnaW9uID0gcm93X2V4dHJhY3QuZmlsdGVyKChfbnVtLCBpKSA9PiB7XG4gICAgICByZXR1cm4gKChpICUgOSkgPj0gY29sX2dyb3VwICogMykgJiYgKChpICUgOSkgPD0gKCgoY29sX2dyb3VwICsgMSkgKiAzKSAtIDEpKVxuICAgIH0pXG4gICAgcmV0dXJuICFyZWdpb24uc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIHNvbHZlKHB1enpsZVN0cmluZykge1xuXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdWRva3VTb2x2ZXI7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkExactSquare",
        "row_letter",
        "column",
        "value",
        "row_multiplier",
        "toUpperCase",
        "charCodeAt",
        "console",
        "log",
        "checkRowPlacement",
        "row_index",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "region",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = (row_letter.toUpperCase().charCodeAt(0) % 65) * 9\n    console.log(row_multiplier + (column - 1))\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 10))\n    console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => (i >= (row_group * 27) && i < ((row_group + 1) * 27)))\n    let region = row_extract.filter((_num, i) => {\n      return ((i % 9) >= col_group * 3) && ((i % 9) <= (((col_group + 1) * 3) - 1))\n    })\n    return !region.some((item) => item == value)\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681219221269
  }
}