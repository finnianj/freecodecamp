{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let coordinates = req.body.coordinate.split('');\n    console.log(req.body);\n\n    if (req.body.puzzle == '' || req.body.coordinate == '' || req.body.value == '') {\n      res.json({\n        error: 'Required field(s) missing'\n      });\n    }\n\n    if (!solver.validate(req.body.puzzle)) {\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    } else if (req.body.puzzle.length != 81) {\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    if (solver.checkValidCoordinates(coordinates) == false) {\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    }\n\n    if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n      return res.json({\n        valid: true\n      });\n    }\n\n    let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false);\n    console.log(errors);\n    let conflicts = errors.map(e => e[0]);\n\n    if (errors.length > 0) {\n      return res.json({\n        valid: false,\n        conflicts: conflicts\n      });\n    }\n\n    return res.json({\n      valid: true\n    });\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9uZ29vc2UiLCJjb25maWciLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJzb2x2ZXIiLCJyb3V0ZSIsInBvc3QiLCJyZXEiLCJyZXMiLCJjb29yZGluYXRlcyIsImJvZHkiLCJjb29yZGluYXRlIiwic3BsaXQiLCJwdXp6bGUiLCJ2YWx1ZSIsImpzb24iLCJlcnJvciIsInZhbGlkYXRlIiwibGVuZ3RoIiwiY2hlY2tWYWxpZENvb3JkaW5hdGVzIiwiY2hlY2tFeGFjdFNxdWFyZSIsInZhbGlkIiwidmFsaWRfcm93IiwiY2hlY2tSb3dQbGFjZW1lbnQiLCJ2YWxpZF9jb2wiLCJjaGVja0NvbFBsYWNlbWVudCIsInZhbGlkX3JlZyIsImNoZWNrUmVnaW9uUGxhY2VtZW50IiwiZXJyb3JzIiwiZmlsdGVyIiwiaSIsImNvbmZsaWN0cyIsIm1hcCIsImUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGlDQUFELENBQTVCOztBQUNBOztBQUNBLElBQUlDLFFBQVEsR0FBR0QsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0FBLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JFLE1BQWxCLEcsQ0FFQTs7O0FBRUFELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQTdCLEVBQW9DO0FBQUVDLEVBQUFBLGVBQWUsRUFBRSxJQUFuQjtBQUF5QkMsRUFBQUEsa0JBQWtCLEVBQUU7QUFBN0MsQ0FBcEMsRUFBd0ZDLElBQXhGLENBQTZGLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG1CQUFaLENBQW5HLEVBQ0ND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NkVGLEdBQUcsQ0FBQ0csSUFBSixDQUFTSSxLQUF0RixDQUFYLENBQWhCO0FBQ0EsUUFBSWMsTUFBTSxHQUFHLENBQUNOLFNBQUQsRUFBWUUsU0FBWixFQUF1QkUsU0FBdkIsRUFBa0NHLE1BQWxDLENBQXlDQyxDQUFDLElBQUlBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxLQUF0RCxDQUFiO0FBQ0FqQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWThCLE1BQVo7QUFDQSxRQUFJRyxTQUFTLEdBQUdILE1BQU0sQ0FBQ0ksR0FBUCxDQUFXQyxDQUFDLElBQUlBLENBQUMsQ0FBQyxDQUFELENBQWpCLENBQWhCOztBQUNBLFFBQUlMLE1BQU0sQ0FBQ1YsTUFBUCxHQUFnQixDQUFwQixFQUF1QjtBQUNyQixhQUFPVixHQUFHLENBQUNPLElBQUosQ0FBUztBQUFFTSxRQUFBQSxLQUFLLEVBQUUsS0FBVDtBQUFnQlUsUUFBQUEsU0FBUyxFQUFFQTtBQUEzQixPQUFULENBQVA7QUFDRDs7QUFDRCxXQUFPdkIsR0FBRyxDQUFDTyxJQUFKLENBQVM7QUFBRU0sTUFBQUEsS0FBSyxFQUFFO0FBQVQsS0FBVCxDQUFQO0FBQ0QsR0E5Qkg7QUFnQ0FsQixFQUFBQSxHQUFHLENBQUNFLEtBQUosQ0FBVSxZQUFWLEVBQ0dDLElBREgsQ0FDUSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYyxDQUVuQixDQUhIO0FBSUQsQ0F4Q0QiLCJzb3VyY2VSb290IjoiL1VzZXJzL2Zpbm5jai9jb2RlL2Zpbm5pYW5qL2ZyZWVjb2RlY2FtcC9xdWFsaXR5X2Fzc3VyYW5jZS9wcm9qZWN0cy9zdWRva3Vfc29sdmVyL3JvdXRlcy8iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFN1ZG9rdVNvbHZlciA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzL3N1ZG9rdS1zb2x2ZXIuanMnKTtcbid1c2Ugc3RyaWN0JztcbmxldCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKVxucmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5cbi8vIC0tLS0tLS0tLSBNb25nbyBEQiBjb25maWcgLS0tLS0tLS0tLS0tLVxuXG5tb25nb29zZS5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPLCB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlfSkudGhlbigoKSA9PiBjb25zb2xlLmxvZyhcIk1vbmdvZGIgY29ubmVjdGVkXCIpKVxuLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwcCkge1xuXG4gIGxldCBzb2x2ZXIgPSBuZXcgU3Vkb2t1U29sdmVyKCk7XG5cbiAgYXBwLnJvdXRlKCcvYXBpL2NoZWNrJylcbiAgICAucG9zdCgocmVxLCByZXMpID0+IHtcbiAgICAgIGxldCBjb29yZGluYXRlcyA9IHJlcS5ib2R5LmNvb3JkaW5hdGUuc3BsaXQoJycpXG4gICAgICBjb25zb2xlLmxvZyhyZXEuYm9keSlcbiAgICAgIGlmIChyZXEuYm9keS5wdXp6bGUgPT0gJycgfHwgcmVxLmJvZHkuY29vcmRpbmF0ZSA9PSAnJyB8fCByZXEuYm9keS52YWx1ZSA9PSAnJykge1xuICAgICAgICByZXMuanNvbih7IGVycm9yOiAnUmVxdWlyZWQgZmllbGQocykgbWlzc2luZycgfSlcbiAgICAgIH1cbiAgICAgIGlmICghc29sdmVyLnZhbGlkYXRlKHJlcS5ib2R5LnB1enpsZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIGNoYXJhY3RlcnMgaW4gcHV6emxlJyB9KVxuICAgICAgfSBlbHNlIGlmIChyZXEuYm9keS5wdXp6bGUubGVuZ3RoICE9IDgxKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7IGVycm9yOiAnRXhwZWN0ZWQgcHV6emxlIHRvIGJlIDgxIGNoYXJhY3RlcnMgbG9uZycgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKHNvbHZlci5jaGVja1ZhbGlkQ29vcmRpbmF0ZXMoY29vcmRpbmF0ZXMpID09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7IGVycm9yOiAnSW52YWxpZCBjb29yZGluYXRlJ30pXG4gICAgICB9XG5cbiAgICAgIGlmIChzb2x2ZXIuY2hlY2tFeGFjdFNxdWFyZShyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7IHZhbGlkOiB0cnVlIH0pXG4gICAgICB9XG4gICAgICBsZXQgdmFsaWRfcm93ID0gW1wicm93XCIsIHNvbHZlci5jaGVja1Jvd1BsYWNlbWVudChyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpXVxuICAgICAgbGV0IHZhbGlkX2NvbCA9IFtcImNvbHVtblwiLCBzb2x2ZXIuY2hlY2tDb2xQbGFjZW1lbnQocmVxLmJvZHkucHV6emxlLCBjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIHJlcS5ib2R5LnZhbHVlKV1cbiAgICAgIGxldCB2YWxpZF9yZWcgPSBbXCJyZWdpb25cIiwgc29sdmVyLmNoZWNrUmVnaW9uUGxhY2VtZW50KHJlcS5ib2R5LnB1enpsZSwgY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzFdLCByZXEuYm9keS52YWx1ZSldXG4gICAgICBsZXQgZXJyb3JzID0gW3ZhbGlkX3JvdywgdmFsaWRfY29sLCB2YWxpZF9yZWddLmZpbHRlcihpID0+IGlbMV0gPT0gZmFsc2UpXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcnMpXG4gICAgICBsZXQgY29uZmxpY3RzID0gZXJyb3JzLm1hcChlID0+IGVbMF0pXG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgdmFsaWQ6IGZhbHNlLCBjb25mbGljdHM6IGNvbmZsaWN0cyB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcy5qc29uKHsgdmFsaWQ6IHRydWUgfSlcbiAgICB9KTtcblxuICBhcHAucm91dGUoJy9hcGkvc29sdmUnKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuXG4gICAgfSk7XG59O1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "coordinates",
        "body",
        "coordinate",
        "split",
        "puzzle",
        "value",
        "json",
        "error",
        "validate",
        "length",
        "checkValidCoordinates",
        "checkExactSquare",
        "valid",
        "valid_row",
        "checkRowPlacement",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement",
        "errors",
        "filter",
        "i",
        "conflicts",
        "map",
        "e"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let coordinates = req.body.coordinate.split('')\n      console.log(req.body)\n      if (req.body.puzzle == '' || req.body.coordinate == '' || req.body.value == '') {\n        res.json({ error: 'Required field(s) missing' })\n      }\n      if (!solver.validate(req.body.puzzle)) {\n        return res.json({ error: 'Invalid characters in puzzle' })\n      } else if (req.body.puzzle.length != 81) {\n        return res.json({ error: 'Expected puzzle to be 81 characters long' })\n      }\n\n      if (solver.checkValidCoordinates(coordinates) == false) {\n        return res.json({ error: 'Invalid coordinate'})\n      }\n\n      if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n        return res.json({ valid: true })\n      }\n      let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false)\n      console.log(errors)\n      let conflicts = errors.map(e => e[0])\n      if (errors.length > 0) {\n        return res.json({ valid: false, conflicts: conflicts })\n      }\n      return res.json({ valid: true })\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681221269929
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkValidCoordinates(coordinates) {\n    let chars = /[A-I]/;\n    let nums = /[0-9]/;\n    console.log(chars.test(coordinates[0]));\n    console.log(nums.test(coordinates[1]));\n\n    if (chars.test(coordinates[0]) || nums.test(coordinates[1])) {\n      return false;\n    }\n\n    return true;\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = row_letter.toUpperCase().charCodeAt(0) % 65 * 9;\n    let index = row_multiplier + (column - 1);\n    return puzzleString[index] != '.' && puzzleString[index] == value;\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65;\n    console.log(\"Row index: \" + row_index);\n    let row = puzzleString.split('').slice(row_index, row_index + 9);\n    console.log(\"Good row value? \" + !row.some(item => item == value));\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num);\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value));\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i >= row_group * 27 && i < (row_group + 1) * 27);\n    let region = row_extract.filter((_num, i) => {\n      return i % 9 >= col_group * 3 && i % 9 <= (col_group + 1) * 3 - 1;\n    });\n    return !region.some(item => item == value);\n  }\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tWYWxpZENvb3JkaW5hdGVzIiwiY29vcmRpbmF0ZXMiLCJjaGFycyIsIm51bXMiLCJjb25zb2xlIiwibG9nIiwiY2hlY2tFeGFjdFNxdWFyZSIsInJvd19sZXR0ZXIiLCJjb2x1bW4iLCJ2YWx1ZSIsInJvd19tdWx0aXBsaWVyIiwidG9VcHBlckNhc2UiLCJjaGFyQ29kZUF0IiwiaW5kZXgiLCJjaGVja1Jvd1BsYWNlbWVudCIsInJvd19pbmRleCIsInJvdyIsInNwbGl0Iiwic2xpY2UiLCJzb21lIiwiaXRlbSIsImNoZWNrQ29sUGxhY2VtZW50IiwiY29sX251bSIsImFycmF5IiwiY29sX2V4dHJhY3QiLCJmaWx0ZXIiLCJfbnVtIiwiaSIsIm51bSIsImNoZWNrUmVnaW9uUGxhY2VtZW50Iiwicm93X2dyb3VwIiwiTWF0aCIsImZsb29yIiwiY29sX2dyb3VwIiwicm93X2V4dHJhY3QiLCJyZWdpb24iLCJzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQU4sQ0FBbUI7QUFFakJDLEVBQUFBLFFBQVEsQ0FBQ0MsWUFBRCxFQUFlO0FBQ3JCLFFBQUlDLEdBQUcsR0FBRyxXQUFWO0FBQ0EsV0FBT0EsR0FBRyxDQUFDQyxJQUFKLENBQVNGLFlBQVQsQ0FBUDtBQUNEOztBQUVERyxFQUFBQSxxQkFBcUIsQ0FBQ0MsV0FBRCxFQUFjO0FBQ2pDLFFBQUlDLEtBQUssR0FBRyxPQUFaO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLE9BQVg7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlILEtBQUssQ0FBQ0gsSUFBTixDQUFXRSxXQUFXLENBQUMsQ0FBRCxDQUF0QixDQUFaO0FBQ0FHLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFJLENBQUNKLElBQUws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QUcxQixZQUFZLENBQUNvQixLQUFiLENBQW1CLEVBQW5CLENBQVo7QUFDQSxRQUFJaUIsV0FBVyxHQUFHWCxLQUFLLENBQUNFLE1BQU4sQ0FBYSxDQUFDQyxJQUFELEVBQU9DLENBQVAsS0FBY0EsQ0FBQyxJQUFLRyxTQUFTLEdBQUcsRUFBbEIsSUFBeUJILENBQUMsR0FBSSxDQUFDRyxTQUFTLEdBQUcsQ0FBYixJQUFrQixFQUEzRSxDQUFsQjtBQUNBLFFBQUlLLE1BQU0sR0FBR0QsV0FBVyxDQUFDVCxNQUFaLENBQW1CLENBQUNDLElBQUQsRUFBT0MsQ0FBUCxLQUFhO0FBQzNDLGFBQVNBLENBQUMsR0FBRyxDQUFMLElBQVdNLFNBQVMsR0FBRyxDQUF4QixJQUFnQ04sQ0FBQyxHQUFHLENBQUwsSUFBYSxDQUFDTSxTQUFTLEdBQUcsQ0FBYixJQUFrQixDQUFuQixHQUF3QixDQUExRTtBQUNELEtBRlksQ0FBYjtBQUdBLFdBQU8sQ0FBQ0UsTUFBTSxDQUFDaEIsSUFBUCxDQUFhQyxJQUFELElBQVVBLElBQUksSUFBSVgsS0FBOUIsQ0FBUjtBQUNEOztBQUVEMkIsRUFBQUEsS0FBSyxDQUFDdkMsWUFBRCxFQUFlLENBRW5COztBQXZEZ0I7O0FBMERuQndDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNDLFlBQWpCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9maW5uY2ovY29kZS9maW5uaWFuai9mcmVlY29kZWNhbXAvcXVhbGl0eV9hc3N1cmFuY2UvcHJvamVjdHMvc3Vkb2t1X3NvbHZlci9jb250cm9sbGVycy8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTdWRva3VTb2x2ZXIge1xuXG4gIHZhbGlkYXRlKHB1enpsZVN0cmluZykge1xuICAgIGxldCByZWcgPSAvXltcXGRcXC5dKiQvXG4gICAgcmV0dXJuIHJlZy50ZXN0KHB1enpsZVN0cmluZylcbiAgfVxuXG4gIGNoZWNrVmFsaWRDb29yZGluYXRlcyhjb29yZGluYXRlcykge1xuICAgIGxldCBjaGFycyA9IC9bQS1JXS9cbiAgICBsZXQgbnVtcyA9IC9bMC05XS9cbiAgICBjb25zb2xlLmxvZyhjaGFycy50ZXN0KGNvb3JkaW5hdGVzWzBdKSlcbiAgICBjb25zb2xlLmxvZyhudW1zLnRlc3QoY29vcmRpbmF0ZXNbMV0pKVxuICAgIGlmIChjaGFycy50ZXN0KGNvb3JkaW5hdGVzWzBdKSB8fCBudW1zLnRlc3QoY29vcmRpbmF0ZXNbMV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGNoZWNrRXhhY3RTcXVhcmUocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IHJvd19tdWx0aXBsaWVyID0gKHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApICUgNjUpICogOVxuICAgIGxldCBpbmRleCA9IHJvd19tdWx0aXBsaWVyICsgKGNvbHVtbiAtIDEpXG4gICAgcmV0dXJuIChwdXp6bGVTdHJpbmdbaW5kZXhdICE9ICcuJyAmJiBwdXp6bGVTdHJpbmdbaW5kZXhdID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSb3dQbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19pbmRleCA9IChyb3dfbGV0dGVyICUgNjUpO1xuICAgIGNvbnNvbGUubG9nKFwiUm93IGluZGV4OiBcIiArIHJvd19pbmRleClcbiAgICBsZXQgcm93ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKS5zbGljZShyb3dfaW5kZXgsIChyb3dfaW5kZXggKyA5KSlcbiAgICBjb25zb2xlLmxvZyhcIkdvb2Qgcm93IHZhbHVlPyBcIiArICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSkpXG4gICAgcmV0dXJuICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrQ29sUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93LCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IGNvbF9udW0gPSBjb2x1bW4gLSAxXG4gICAgbGV0IGFycmF5ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKVxuICAgIGxldCBjb2xfZXh0cmFjdCA9IGFycmF5LmZpbHRlcigoX251bSwgaSkgPT4gaSAlIDkgPT0gY29sX251bSlcbiAgICBjb25zb2xlLmxvZyhcIkdvb2QgY29sdW1uIHZhbHVlPyBcIiArICFjb2xfZXh0cmFjdC5zb21lKG51bSA9PiBudW0gPT0gdmFsdWUpKVxuICAgIHJldHVybiAhY29sX2V4dHJhY3Quc29tZShudW0gPT4gbnVtID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSZWdpb25QbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19ncm91cCA9IE1hdGguZmxvb3IoKHJvd19sZXR0ZXIgJSA2NSkgLyAzKTtcbiAgICBsZXQgY29sX2dyb3VwID0gTWF0aC5mbG9vcigoY29sdW1uIC0gMSkgLyAzKTtcbiAgICBsZXQgYXJyYXkgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpXG4gICAgbGV0IHJvd19leHRyYWN0ID0gYXJyYXkuZmlsdGVyKChfbnVtLCBpKSA9PiAoaSA+PSAocm93X2dyb3VwICogMjcpICYmIGkgPCAoKHJvd19ncm91cCArIDEpICogMjcpKSlcbiAgICBsZXQgcmVnaW9uID0gcm93X2V4dHJhY3QuZmlsdGVyKChfbnVtLCBpKSA9PiB7XG4gICAgICByZXR1cm4gKChpICUgOSkgPj0gY29sX2dyb3VwICogMykgJiYgKChpICUgOSkgPD0gKCgoY29sX2dyb3VwICsgMSkgKiAzKSAtIDEpKVxuICAgIH0pXG4gICAgcmV0dXJuICFyZWdpb24uc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIHNvbHZlKHB1enpsZVN0cmluZykge1xuXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdWRva3VTb2x2ZXI7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkValidCoordinates",
        "coordinates",
        "chars",
        "nums",
        "console",
        "log",
        "checkExactSquare",
        "row_letter",
        "column",
        "value",
        "row_multiplier",
        "toUpperCase",
        "charCodeAt",
        "index",
        "checkRowPlacement",
        "row_index",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "region",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkValidCoordinates(coordinates) {\n    let chars = /[A-I]/\n    let nums = /[0-9]/\n    console.log(chars.test(coordinates[0]))\n    console.log(nums.test(coordinates[1]))\n    if (chars.test(coordinates[0]) || nums.test(coordinates[1])) {\n      return false\n    }\n    return true\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = (row_letter.toUpperCase().charCodeAt(0) % 65) * 9\n    let index = row_multiplier + (column - 1)\n    return (puzzleString[index] != '.' && puzzleString[index] == value)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 9))\n    console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => (i >= (row_group * 27) && i < ((row_group + 1) * 27)))\n    let region = row_extract.filter((_num, i) => {\n      return ((i % 9) >= col_group * 3) && ((i % 9) <= (((col_group + 1) * 3) - 1))\n    })\n    return !region.some((item) => item == value)\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681221648718
  }
}