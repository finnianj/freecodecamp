{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    console.log(\"\\n\\n\");\n    console.log(req.body);\n    console.log(req.body.coordinate);\n\n    if (req.body.puzzle == '' || !req.body.coordinate || req.body.value == '') {\n      console.log('Required field(s) missing');\n      return res.json({\n        error: 'Required field(s) missing'\n      });\n    }\n\n    let coordinates = req.body.coordinate.split('');\n\n    if (!solver.validate(req.body.puzzle)) {\n      console.log('Invalid characters in puzzle');\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    } else if (req.body.puzzle.length != 81) {\n      console.log('Expected puzzle to be 81 characters long');\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    if (solver.checkValidCoordinates(coordinates) == false) {\n      console.log('Invalid coordinate');\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    } else if (solver.checkValidValue(req.body.value) == false) {\n      console.log('Invalid valid');\n      return res.json({\n        error: 'Invalid value'\n      });\n    }\n\n    if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n      return res.json({\n        valid: true\n      });\n    }\n\n    let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false);\n    console.log(errors);\n    let conflicts = errors.map(e => e[0]);\n\n    if (errors.length > 0) {\n      return res.json({\n        valid: false,\n        conflicts: conflicts\n      });\n    }\n\n    return res.json({\n      valid: true\n    });\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "coordinate",
        "puzzle",
        "value",
        "json",
        "error",
        "coordinates",
        "split",
        "validate",
        "length",
        "checkValidCoordinates",
        "checkValidValue",
        "checkExactSquare",
        "valid",
        "valid_row",
        "checkRowPlacement",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement",
        "errors",
        "filter",
        "i",
        "conflicts",
        "map",
        "e"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      console.log(\"\\n\\n\")\n      console.log(req.body)\n      console.log(req.body.coordinate)\n      if (req.body.puzzle == '' || !req.body.coordinate || req.body.value == '') {\n        console.log('Required field(s) missing')\n        return res.json({ error: 'Required field(s) missing' })\n      }\n      let coordinates = req.body.coordinate.split('')\n      if (!solver.validate(req.body.puzzle)) {\n        console.log('Invalid characters in puzzle')\n        return res.json({ error: 'Invalid characters in puzzle' })\n      } else if (req.body.puzzle.length != 81) {\n        console.log('Expected puzzle to be 81 characters long')\n        return res.json({ error: 'Expected puzzle to be 81 characters long' })\n      }\n\n      if (solver.checkValidCoordinates(coordinates) == false) {\n        console.log('Invalid coordinate')\n        return res.json({ error: 'Invalid coordinate'})\n      } else if (solver.checkValidValue(req.body.value) == false) {\n        console.log('Invalid valid')\n        return res.json({ error: 'Invalid value'})\n      }\n\n      if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n        return res.json({ valid: true })\n      }\n      let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false)\n      console.log(errors)\n      let conflicts = errors.map(e => e[0])\n      if (errors.length > 0) {\n        return res.json({ valid: false, conflicts: conflicts })\n      }\n      return res.json({ valid: true })\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681285621176
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkValidCoordinates(coordinates) {\n    if (coordinates.length > 2) return false;\n    let chars = /[A-I]/i;\n    let nums = /[1-9]/;\n\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkValidValue(value) {\n    if (value.length > 1) return false;\n    let nums = /[1-9]/;\n    return nums.test(value);\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = row_letter.toUpperCase().charCodeAt(0) % 65 * 9;\n    let index = row_multiplier + (column - 1);\n    return puzzleString[index] != '.' && puzzleString[index] == value;\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65; // console.log(\"Row index: \" + row_index)\n\n    let row = puzzleString.split('').slice(row_index, row_index + 9); // console.log(\"Good row value? \" + !row.some((item) => item == value))\n\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num); // console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i >= row_group * 27 && i < (row_group + 1) * 27);\n    let region = row_extract.filter((_num, i) => {\n      return i % 9 >= col_group * 3 && i % 9 <= (col_group + 1) * 3 - 1;\n    });\n    return !region.some(item => item == value);\n  }\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tWYWxpZENvb3JkaW5hdGVzIiwiY29vcmRpbmF0ZXMiLCJsZW5ndGgiLCJjaGFycyIsIm51bXMiLCJjaGVja1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsImNoZWNrRXhhY3RTcXVhcmUiLCJyb3dfbGV0dGVyIiwiY29sdW1uIiwicm93X211bHRpcGxpZXIiLCJ0b1VwcGVyQ2FzZSIsImNoYXJDb2RlQXQiLCJpbmRleCIsImNoZWNrUm93UGxhY2VtZW50Iiwicm93X2luZGV4Iiwicm93Iiwic3BsaXQiLCJzbGljZSIsInNvbWUiLCJpdGVtIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJjb2xfbnVtIiwiYXJyYXkiLCJjb2xfZXh0cmFjdCIsImZpbHRlciIsIl9udW0iLCJpIiwibnVtIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJyb3dfZ3JvdXAiLCJNYXRoIiwiZmxvb3IiLCJjb2xfZ3JvdXAiLCJyb3dfZXh0cmFjdCIsInJlZ2lvbiIsInNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsWUFBTixDQUFtQjtBQUVqQkMsRUFBQUEsUUFBUSxDQUFDQyxZQUFELEVBQWU7QUFDckIsUUFBSUMsR0FBRyxHQUFHLFdBQVY7QUFDQSxXQUFPQSxHQUFHLENBQUNDLElBQUosQ0FBU0YsWUFBVCxDQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLHFCQUFxQixDQUFDQyxXQUFELEVBQWM7QUFDakMsUUFBSUEsV0FBVyxDQUFDQyxNQUFaLEdBQXFCLENBQXpCLEVBQTRCLE9BQU8sS0FBUDtBQUM1QixRQUFJQyxLQUFLLEdBQUcsUUFBWjtBQUNBLFFBQUlDLElBQUksR0FBRyxPQUFYOztBQUNBLFFBQUlELEtBQUssQ0FBQ0osSUFBTixDQUFXRSxXQUFXLENBQUMsQ0FBRCxDQUF0QixLQUE4QkcsSUFBSSxDQUFDTCxJQUFMLENBQVVFLFdBQVcsQ0FBQyxDQUFELENBQXJCLENBQWxDLEVBQTZEO0FBQzNELGFBQU8sSUFBUDtBQUNEOztBQUNELFdBQU8sS0FBUDtBQUNEOztBQUVESSxFQUFBQSxlQUFlLENBQUNDLEtBQUQsRUFBUTtBQUNyQixRQUFJQSxLQUFLLENBQUNKLE1BQU4sR0FBZSxDQUFuQixFQUFzQixPQUFPLEtBQVA7QUFDdEIsUUFBSUUsSUFBSSxHQUFHLE9BQVg7QUFDQSxXQUFPQSxJQUFJLENBQUNMLElBQUwsQ0FBVU8sS0FBVixDQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLGdCQUFnQixDQUFDVixZQUFELEVBQWVXLFVBQWYsRUFBMkJDLE1BQTNCLEVBQW1DSCxLQUFuQyxFQUEwQztBQUN4RCxRQUFJSSxjQUFjLEdBQUlGLFVBQVUsQ0FBQ0csV0FBWCxHQUF5QkMsVUFBekIsQ0FBb0MsQ0FBcEMsSUFBeUMsRUFBMUMsR0FBZ0QsQ0FBckU7QUFDQSxRQUFJQyxLQUFLLEdBQUdILGNBQWMsSUFBSUQsTUFBTSxHQUFHLENBQWIsQ0FBMUI7QUFDQSxXQUFRWixZQUFZLENBQUNnQixLQUFELENBQVosSUFBdUIsR0FBdkIsSUFBOEJoQixZQUFZLENBQUNnQixLQUFELENBQVosSUFBdUJQLEtBQTdEO0FBQ0Q7O0FBRURRLEVBQUFBLGlCQUFpQixDQUFDakIsWUFBRCxFQUFlVyxVQUFmLEVBQTJCQyxNQUEzQixFQUFtQ0gsS0FBbkMsRUFBMEM7QUFDekRFLElBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFDRyxXQUFYLEdBQXlCQyxVQUF6QixDQUFvQyxDQUFwQyxDQUFiO0FBQ0EsUUFBSUcsU0FBUyxHQUFJUCxVQUFVLEdBQUcsRUFBOUIsQ0FGeUQsQ0FHekQ7O0FBQ0EsUUFBSVEsR0FBRyxHQUFHbkIsWUFBWSxDQUFDb0IsS0FBYixDQUFtQixFQUFuQixFQUF1QkMsS0FBdkIsQ0FBNkJILFNBQTdCLEVBQXlDQSxTQUFTLEdBQUcsQ0FBckQsQ0FBVixDQUp5RCxDQUt6RDs7QUFDQSxXQUFPLENBQUNDLEdBQUcsQ0FBQ0csSUFBSixDQUFVQyxJQUFELElBQVVBLElBQUksSUFBSWQsS0FBM0IsQ0FBUjtBQUNEOztBQUVEZSxFQUFBQSxpQkFBaUIsQ0FBQ3hCLFlBQUQsRUFBZW1CLEdBQWYsRUFBb0JQLE1BQXBCLEVBQTRCSCxLQUE1QixFQUFtQztBQUNsRCxRQUFJZ0IsT0FBTyxHQUFHYixNQUFNLEdBQUcsQ0FBdkI7QUFDQSxRQUFJYyxLQUFLLEdBQUcxQixZQUFZLENBQUNvQixLQUFiLENBQW1CLEVBQW5CLENBQVo7QUFDQSxRQUFJTyxXQUFXLEdBQUdELEtBQUssQ0FBQ0UsTUFBTixDQUFhLENBQUNDLElBQUQsRUFBT0MsQ0FBUCxLQUFhQSxDQUFDLEdBQUcsQ0FBSixJQUFTTCxPQUFuQyxDQUFsQixDQUhrRCxDQUlsRDs7QUFDQSxXQUFPLENBQUNFLFdBQVcsQ0FBQ0wsSUFBWixDQUFpQlMsR0FBRyxJQUFJQSxHQUFHLElBQUl0QixLQUEvQixDQUFSO0FBQ0Q7O0FBRUR1QixFQUFBQSxvQkFBb0IsQ0FBQ2hDLFlBQUQsRUFBZVcsVUFBZixFQUEyQkMsTUFBM0IsRUFBbUNILEtBQW5DLEVBQTBDO0FBQzVERSxJQUFBQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ0csV0FBWCxHQUF5QkMsVUFBekIsQ0FBb0MsQ0FBcEMsQ0FBYjtBQUNBLFFBQUlrQixTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFZeEIsVUFBVSxHQUFHLEVBQWQsR0FBb0IsQ0FBL0IsQ0FBaEI7QUFDQSxRQUFJeUIsU0FBUyxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBVyxDQUFDdkIsTUFBTSxHQUFHLENBQVYsSUFBZSxDQUExQixDQUFoQjtBQUNBLFFBQUljLEtBQUssR0FBRzFCLFlBQVksQ0FBQ29CLEtBQWIsQ0FBbUIsRUFBbkIsQ0FBWjtBQUNBLFFBQUlpQixXQUFXLEdBQUdYLEtBQUssQ0FBQ0UsTUFBTixDQUFhLENBQUNDLElBQUQsRUFBT0MsQ0FBUCxLQUFjQSxDQUFDLElBQUtHLFNBQVMsR0FBRyxFQUFsQixJQUF5QkgsQ0FBQyxHQUFJLENBQUNHLFNBQVMsR0FBRyxDQUFiLElBQWtCLEVBQTNFLENBQWxCO0FBQ0EsUUFBSUssTUFBTSxHQUFHRCxXQUFXLENBQUNULE1BQVosQ0FBbUIsQ0FBQ0MsSUFBRCxFQUFPQyxDQUFQLEtBQWE7QUFDM0MsYUFBU0EsQ0FBQyxHQUFHLENBQUwsSUFBV00sU0FBUyxHQUFHLENBQXhCLElBQWdDTixDQUFDLEdBQUcsQ0FBTCxJQUFhLENBQUNNLFNBQVMsR0FBRyxDQUFiLElBQWtCLENBQW5CLEdBQXdCLENBQTFFO0FBQ0QsS0FGWSxDQUFiO0FBR0EsV0FBTyxDQUFDRSxNQUFNLENBQUNoQixJQUFQLENBQWFDLElBQUQsSUFBVUEsSUFBSSxJQUFJZCxLQUE5QixDQUFSO0FBQ0Q7O0FBRUQ4QixFQUFBQSxLQUFLLENBQUN2QyxZQUFELEVBQWUsQ0FFbkI7O0FBNURnQjs7QUErRG5Cd0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCM0MsWUFBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2Zpbm5jai9jb2RlL2Zpbm5pYW5qL2ZyZWVjb2RlY2FtcC9xdWFsaXR5X2Fzc3VyYW5jZS9wcm9qZWN0cy9zdWRva3Vfc29sdmVyL2NvbnRyb2xsZXJzLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFN1ZG9rdVNvbHZlciB7XG5cbiAgdmFsaWRhdGUocHV6emxlU3RyaW5nKSB7XG4gICAgbGV0IHJlZyA9IC9eW1xcZFxcLl0qJC9cbiAgICByZXR1cm4gcmVnLnRlc3QocHV6emxlU3RyaW5nKVxuICB9XG5cbiAgY2hlY2tWYWxpZENvb3JkaW5hdGVzKGNvb3JkaW5hdGVzKSB7XG4gICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA+IDIpIHJldHVybiBmYWxzZVxuICAgIGxldCBjaGFycyA9IC9bQS1JXS9pXG4gICAgbGV0IG51bXMgPSAvWzEtOV0vXG4gICAgaWYgKGNoYXJzLnRlc3QoY29vcmRpbmF0ZXNbMF0pICYmIG51bXMudGVzdChjb29yZGluYXRlc1sxXSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgY2hlY2tWYWxpZFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHJldHVybiBmYWxzZVxuICAgIGxldCBudW1zID0gL1sxLTldL1xuICAgIHJldHVybiBudW1zLnRlc3QodmFsdWUpXG4gIH1cblxuICBjaGVja0V4YWN0U3F1YXJlKHB1enpsZVN0cmluZywgcm93X2xldHRlciwgY29sdW1uLCB2YWx1ZSkge1xuICAgIGxldCByb3dfbXVsdGlwbGllciA9IChyb3dfbGV0dGVyLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKSAlIDY1KSAqIDlcbiAgICBsZXQgaW5kZXggPSByb3dfbXVsdGlwbGllciArIChjb2x1bW4gLSAxKVxuICAgIHJldHVybiAocHV6emxlU3RyaW5nW2luZGV4XSAhPSAnLicgJiYgcHV6emxlU3RyaW5nW2luZGV4XSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrUm93UGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93X2xldHRlciwgY29sdW1uLCB2YWx1ZSkge1xuICAgIHJvd19sZXR0ZXIgPSByb3dfbGV0dGVyLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKVxuICAgIGxldCByb3dfaW5kZXggPSAocm93X2xldHRlciAlIDY1KTtcbiAgICAvLyBjb25zb2xlLmxvZyhcIlJvdyBpbmRleDogXCIgKyByb3dfaW5kZXgpXG4gICAgbGV0IHJvdyA9IHB1enpsZVN0cmluZy5zcGxpdCgnJykuc2xpY2Uocm93X2luZGV4LCAocm93X2luZGV4ICsgOSkpXG4gICAgLy8gY29uc29sZS5sb2coXCJHb29kIHJvdyB2YWx1ZT8gXCIgKyAhcm93LnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT0gdmFsdWUpKVxuICAgIHJldHVybiAhcm93LnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT0gdmFsdWUpXG4gIH1cblxuICBjaGVja0NvbFBsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvdywgY29sdW1uLCB2YWx1ZSkge1xuICAgIGxldCBjb2xfbnVtID0gY29sdW1uIC0gMVxuICAgIGxldCBhcnJheSA9IHB1enpsZVN0cmluZy5zcGxpdCgnJylcbiAgICBsZXQgY29sX2V4dHJhY3QgPSBhcnJheS5maWx0ZXIoKF9udW0sIGkpID0+IGkgJSA5ID09IGNvbF9udW0pXG4gICAgLy8gY29uc29sZS5sb2coXCJHb29kIGNvbHVtbiB2YWx1ZT8gXCIgKyAhY29sX2V4dHJhY3Quc29tZShudW0gPT4gbnVtID09IHZhbHVlKSlcbiAgICByZXR1cm4gIWNvbF9leHRyYWN0LnNvbWUobnVtID0+IG51bSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrUmVnaW9uUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93X2xldHRlciwgY29sdW1uLCB2YWx1ZSkge1xuICAgIHJvd19sZXR0ZXIgPSByb3dfbGV0dGVyLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKVxuICAgIGxldCByb3dfZ3JvdXAgPSBNYXRoLmZsb29yKChyb3dfbGV0dGVyICUgNjUpIC8gMyk7XG4gICAgbGV0IGNvbF9ncm91cCA9IE1hdGguZmxvb3IoKGNvbHVtbiAtIDEpIC8gMyk7XG4gICAgbGV0IGFycmF5ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKVxuICAgIGxldCByb3dfZXh0cmFjdCA9IGFycmF5LmZpbHRlcigoX251bSwgaSkgPT4gKGkgPj0gKHJvd19ncm91cCAqIDI3KSAmJiBpIDwgKChyb3dfZ3JvdXAgKyAxKSAqIDI3KSkpXG4gICAgbGV0IHJlZ2lvbiA9IHJvd19leHRyYWN0LmZpbHRlcigoX251bSwgaSkgPT4ge1xuICAgICAgcmV0dXJuICgoaSAlIDkpID49IGNvbF9ncm91cCAqIDMpICYmICgoaSAlIDkpIDw9ICgoKGNvbF9ncm91cCArIDEpICogMykgLSAxKSlcbiAgICB9KVxuICAgIHJldHVybiAhcmVnaW9uLnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT0gdmFsdWUpXG4gIH1cblxuICBzb2x2ZShwdXp6bGVTdHJpbmcpIHtcblxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vkb2t1U29sdmVyO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkValidCoordinates",
        "coordinates",
        "length",
        "chars",
        "nums",
        "checkValidValue",
        "value",
        "checkExactSquare",
        "row_letter",
        "column",
        "row_multiplier",
        "toUpperCase",
        "charCodeAt",
        "index",
        "checkRowPlacement",
        "row_index",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "region",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkValidCoordinates(coordinates) {\n    if (coordinates.length > 2) return false\n    let chars = /[A-I]/i\n    let nums = /[1-9]/\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true\n    }\n    return false\n  }\n\n  checkValidValue(value) {\n    if (value.length > 1) return false\n    let nums = /[1-9]/\n    return nums.test(value)\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = (row_letter.toUpperCase().charCodeAt(0) % 65) * 9\n    let index = row_multiplier + (column - 1)\n    return (puzzleString[index] != '.' && puzzleString[index] == value)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    // console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 9))\n    // console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    // console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => (i >= (row_group * 27) && i < ((row_group + 1) * 27)))\n    let region = row_extract.filter((_num, i) => {\n      return ((i % 9) >= col_group * 3) && ((i % 9) <= (((col_group + 1) * 3) - 1))\n    })\n    return !region.some((item) => item == value)\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681287138820
  }
}