{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    console.log(\"\\n\\n\");\n    let coordinates = req.body.coordinate.split('');\n    console.log(req.body);\n\n    if (req.body.puzzle == '' || coordinates[0] == '' || coordinates[1] == '' || req.body.value == '') {\n      console.log('Required field(s) missing');\n      return res.json({\n        error: 'Required field(s) missing'\n      });\n    }\n\n    if (!solver.validate(req.body.puzzle)) {\n      console.log('Invalid characters in puzzle');\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    } else if (req.body.puzzle.length != 81) {\n      console.log('Expected puzzle to be 81 characters long');\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    if (solver.checkValidCoordinates(coordinates) == false) {\n      console.log('Invalid coordinate');\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    } else if (solver.checkValidValue(req.body.value) == false) {\n      console.log('Invalid valid');\n      return res.json({\n        error: 'Invalid value'\n      });\n    }\n\n    if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n      return res.json({\n        valid: true\n      });\n    }\n\n    let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false);\n    console.log(errors);\n    let conflicts = errors.map(e => e[0]);\n\n    if (errors.length > 0) {\n      return res.json({\n        valid: false,\n        conflicts: conflicts\n      });\n    }\n\n    return res.json({\n      valid: true\n    });\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "coordinates",
        "body",
        "coordinate",
        "split",
        "puzzle",
        "value",
        "json",
        "error",
        "validate",
        "length",
        "checkValidCoordinates",
        "checkValidValue",
        "checkExactSquare",
        "valid",
        "valid_row",
        "checkRowPlacement",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement",
        "errors",
        "filter",
        "i",
        "conflicts",
        "map",
        "e"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      console.log(\"\\n\\n\")\n      let coordinates = req.body.coordinate.split('')\n      console.log(req.body)\n      if (req.body.puzzle == '' || coordinates[0] == '' || coordinates[1] == '' || req.body.value == '') {\n        console.log('Required field(s) missing')\n        return res.json({ error: 'Required field(s) missing' })\n      }\n      if (!solver.validate(req.body.puzzle)) {\n        console.log('Invalid characters in puzzle')\n        return res.json({ error: 'Invalid characters in puzzle' })\n      } else if (req.body.puzzle.length != 81) {\n        console.log('Expected puzzle to be 81 characters long')\n        return res.json({ error: 'Expected puzzle to be 81 characters long' })\n      }\n\n      if (solver.checkValidCoordinates(coordinates) == false) {\n        console.log('Invalid coordinate')\n        return res.json({ error: 'Invalid coordinate'})\n      } else if (solver.checkValidValue(req.body.value) == false) {\n        console.log('Invalid valid')\n        return res.json({ error: 'Invalid value'})\n      }\n\n      if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n        return res.json({ valid: true })\n      }\n      let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false)\n      console.log(errors)\n      let conflicts = errors.map(e => e[0])\n      if (errors.length > 0) {\n        return res.json({ valid: false, conflicts: conflicts })\n      }\n      return res.json({ valid: true })\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681225090357
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkValidCoordinates(coordinates) {\n    if (coordinates.length > 2) return false;\n    let chars = /[A-I]/i;\n    let nums = /[1-9]/;\n\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkValidValue(value) {\n    if (value.split('').length > 1) return false;\n    let nums = /[1-9]/;\n    return nums.test(value);\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = row_letter.toUpperCase().charCodeAt(0) % 65 * 9;\n    let index = row_multiplier + (column - 1);\n    return puzzleString[index] != '.' && puzzleString[index] == value;\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65; // console.log(\"Row index: \" + row_index)\n\n    let row = puzzleString.split('').slice(row_index, row_index + 9); // console.log(\"Good row value? \" + !row.some((item) => item == value))\n\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num); // console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i >= row_group * 27 && i < (row_group + 1) * 27);\n    let region = row_extract.filter((_num, i) => {\n      return i % 9 >= col_group * 3 && i % 9 <= (col_group + 1) * 3 - 1;\n    });\n    return !region.some(item => item == value);\n  }\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tWYWxpZENvb3JkaW5hdGVzIiwiY29vcmRpbmF0ZXMiLCJsZW5ndGgiLCJjaGFycyIsIm51bXMiLCJjaGVja1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsInNwbGl0IiwiY2hlY2tFeGFjdFNxdWFyZSIsInJvd19sZXR0ZXIiLCJjb2x1bW4iLCJyb3dfbXVsdGlwbGllciIsInRvVXBwZXJDYXNlIiwiY2hhckNvZGVBdCIsImluZGV4IiwiY2hlY2tSb3dQbGFjZW1lbnQiLCJyb3dfaW5kZXgiLCJyb3ciLCJzbGljZSIsInNvbWUiLCJpdGVtIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJjb2xfbnVtIiwiYXJyYXkiLCJjb2xfZXh0cmFjdCIsImZpbHRlciIsIl9udW0iLCJpIiwibnVtIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJyb3dfZ3JvdXAiLCJNYXRoIiwiZmxvb3IiLCJjb2xfZ3JvdXAiLCJyb3dfZXh0cmFjdCIsInJlZ2lvbiIsInNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsWUFBTixDQUFtQjtBQUVqQkMsRUFBQUEsUUFBUSxDQUFDQyxZQUFELEVBQWU7QUFDckIsUUFBSUMsR0FBRyxHQUFHLFdBQVY7QUFDQSxXQUFPQSxHQUFHLENBQUNDLElBQUosQ0FBU0YsWUFBVCxDQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLHFCQUFxQixDQUFDQyxXQUFELEVBQWM7QUFDakMsUUFBSUEsV0FBVyxDQUFDQyxNQUFaLEdBQXFCLENBQXpCLEVBQTRCLE9BQU8sS0FBUDtBQUM1QixRQUFJQyxLQUFLLEdBQUcsUUFBWjtBQUNBLFFBQUlDLElBQUksR0FBRyxPQUFYOztBQUNBLFFBQUlELEtBQUssQ0FBQ0osSUFBTixDQUFXRSxXQUFXLENBQUMsQ0FBRCxDQUF0QixLQUE4QkcsSUFB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LEdBQUcsRUFBbEIsSUFBeUJILENBQUMsR0FBSSxDQUFDRyxTQUFTLEdBQUcsQ0FBYixJQUFrQixFQUEzRSxDQUFsQjtBQUNBLFFBQUlLLE1BQU0sR0FBR0QsV0FBVyxDQUFDVCxNQUFaLENBQW1CLENBQUNDLElBQUQsRUFBT0MsQ0FBUCxLQUFhO0FBQzNDLGFBQVNBLENBQUMsR0FBRyxDQUFMLElBQVdNLFNBQVMsR0FBRyxDQUF4QixJQUFnQ04sQ0FBQyxHQUFHLENBQUwsSUFBYSxDQUFDTSxTQUFTLEdBQUcsQ0FBYixJQUFrQixDQUFuQixHQUF3QixDQUExRTtBQUNELEtBRlksQ0FBYjtBQUdBLFdBQU8sQ0FBQ0UsTUFBTSxDQUFDaEIsSUFBUCxDQUFhQyxJQUFELElBQVVBLElBQUksSUFBSWQsS0FBOUIsQ0FBUjtBQUNEOztBQUVEOEIsRUFBQUEsS0FBSyxDQUFDdkMsWUFBRCxFQUFlLENBRW5COztBQTVEZ0I7O0FBK0RuQndDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNDLFlBQWpCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9maW5uY2ovY29kZS9maW5uaWFuai9mcmVlY29kZWNhbXAvcXVhbGl0eV9hc3N1cmFuY2UvcHJvamVjdHMvc3Vkb2t1X3NvbHZlci9jb250cm9sbGVycy8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTdWRva3VTb2x2ZXIge1xuXG4gIHZhbGlkYXRlKHB1enpsZVN0cmluZykge1xuICAgIGxldCByZWcgPSAvXltcXGRcXC5dKiQvXG4gICAgcmV0dXJuIHJlZy50ZXN0KHB1enpsZVN0cmluZylcbiAgfVxuXG4gIGNoZWNrVmFsaWRDb29yZGluYXRlcyhjb29yZGluYXRlcykge1xuICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPiAyKSByZXR1cm4gZmFsc2VcbiAgICBsZXQgY2hhcnMgPSAvW0EtSV0vaVxuICAgIGxldCBudW1zID0gL1sxLTldL1xuICAgIGlmIChjaGFycy50ZXN0KGNvb3JkaW5hdGVzWzBdKSAmJiBudW1zLnRlc3QoY29vcmRpbmF0ZXNbMV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGNoZWNrVmFsaWRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZS5zcGxpdCgnJykubGVuZ3RoID4gMSkgcmV0dXJuIGZhbHNlXG4gICAgbGV0IG51bXMgPSAvWzEtOV0vXG4gICAgcmV0dXJuIG51bXMudGVzdCh2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrRXhhY3RTcXVhcmUocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IHJvd19tdWx0aXBsaWVyID0gKHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApICUgNjUpICogOVxuICAgIGxldCBpbmRleCA9IHJvd19tdWx0aXBsaWVyICsgKGNvbHVtbiAtIDEpXG4gICAgcmV0dXJuIChwdXp6bGVTdHJpbmdbaW5kZXhdICE9ICcuJyAmJiBwdXp6bGVTdHJpbmdbaW5kZXhdID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSb3dQbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19pbmRleCA9IChyb3dfbGV0dGVyICUgNjUpO1xuICAgIC8vIGNvbnNvbGUubG9nKFwiUm93IGluZGV4OiBcIiArIHJvd19pbmRleClcbiAgICBsZXQgcm93ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKS5zbGljZShyb3dfaW5kZXgsIChyb3dfaW5kZXggKyA5KSlcbiAgICAvLyBjb25zb2xlLmxvZyhcIkdvb2Qgcm93IHZhbHVlPyBcIiArICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSkpXG4gICAgcmV0dXJuICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrQ29sUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93LCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IGNvbF9udW0gPSBjb2x1bW4gLSAxXG4gICAgbGV0IGFycmF5ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKVxuICAgIGxldCBjb2xfZXh0cmFjdCA9IGFycmF5LmZpbHRlcigoX251bSwgaSkgPT4gaSAlIDkgPT0gY29sX251bSlcbiAgICAvLyBjb25zb2xlLmxvZyhcIkdvb2QgY29sdW1uIHZhbHVlPyBcIiArICFjb2xfZXh0cmFjdC5zb21lKG51bSA9PiBudW0gPT0gdmFsdWUpKVxuICAgIHJldHVybiAhY29sX2V4dHJhY3Quc29tZShudW0gPT4gbnVtID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSZWdpb25QbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19ncm91cCA9IE1hdGguZmxvb3IoKHJvd19sZXR0ZXIgJSA2NSkgLyAzKTtcbiAgICBsZXQgY29sX2dyb3VwID0gTWF0aC5mbG9vcigoY29sdW1uIC0gMSkgLyAzKTtcbiAgICBsZXQgYXJyYXkgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpXG4gICAgbGV0IHJvd19leHRyYWN0ID0gYXJyYXkuZmlsdGVyKChfbnVtLCBpKSA9PiAoaSA+PSAocm93X2dyb3VwICogMjcpICYmIGkgPCAoKHJvd19ncm91cCArIDEpICogMjcpKSlcbiAgICBsZXQgcmVnaW9uID0gcm93X2V4dHJhY3QuZmlsdGVyKChfbnVtLCBpKSA9PiB7XG4gICAgICByZXR1cm4gKChpICUgOSkgPj0gY29sX2dyb3VwICogMykgJiYgKChpICUgOSkgPD0gKCgoY29sX2dyb3VwICsgMSkgKiAzKSAtIDEpKVxuICAgIH0pXG4gICAgcmV0dXJuICFyZWdpb24uc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIHNvbHZlKHB1enpsZVN0cmluZykge1xuXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdWRva3VTb2x2ZXI7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkValidCoordinates",
        "coordinates",
        "length",
        "chars",
        "nums",
        "checkValidValue",
        "value",
        "split",
        "checkExactSquare",
        "row_letter",
        "column",
        "row_multiplier",
        "toUpperCase",
        "charCodeAt",
        "index",
        "checkRowPlacement",
        "row_index",
        "row",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "region",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkValidCoordinates(coordinates) {\n    if (coordinates.length > 2) return false\n    let chars = /[A-I]/i\n    let nums = /[1-9]/\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true\n    }\n    return false\n  }\n\n  checkValidValue(value) {\n    if (value.split('').length > 1) return false\n    let nums = /[1-9]/\n    return nums.test(value)\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = (row_letter.toUpperCase().charCodeAt(0) % 65) * 9\n    let index = row_multiplier + (column - 1)\n    return (puzzleString[index] != '.' && puzzleString[index] == value)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    // console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 9))\n    // console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    // console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => (i >= (row_group * 27) && i < ((row_group + 1) * 27)))\n    let region = row_extract.filter((_num, i) => {\n      return ((i % 9) >= col_group * 3) && ((i % 9) <= (((col_group + 1) * 3) - 1))\n    })\n    return !region.some((item) => item == value)\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681224822026
  }
}