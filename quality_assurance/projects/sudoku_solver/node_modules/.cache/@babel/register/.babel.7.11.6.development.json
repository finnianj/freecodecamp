{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nrequire('dotenv').config();\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    console.log(\"\\n\\n\");\n    console.log(req.body);\n    console.log(req.body.coordinate);\n\n    if (!req.body.puzzle || !req.body.coordinate || !req.body.value) {\n      console.log('Required field(s) missing');\n      return res.json({\n        error: 'Required field(s) missing'\n      });\n    }\n\n    let coordinates = req.body.coordinate.split('');\n\n    if (!solver.validate(req.body.puzzle)) {\n      console.log('Invalid characters in puzzle');\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    } else if (req.body.puzzle.length != 81) {\n      console.log('Expected puzzle to be 81 characters long');\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    if (solver.checkValidCoordinates(coordinates) == false) {\n      console.log('Invalid coordinate');\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    } else if (solver.checkValidValue(req.body.value) == false) {\n      console.log('Invalid valid');\n      return res.json({\n        error: 'Invalid value'\n      });\n    }\n\n    if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n      return res.json({\n        valid: true\n      });\n    }\n\n    let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false);\n    console.log(errors);\n    let conflicts = errors.map(e => e[0]);\n\n    if (errors.length > 0) {\n      return res.json({\n        valid: false,\n        conflict: conflicts\n      });\n    }\n\n    return res.json({\n      valid: true\n    });\n  });\n  app.route('/api/solve').post((req, res) => {\n    console.log(req.body);\n\n    if (!req.body.puzzle) {\n      console.log('Required field(s) missing');\n      return res.json({\n        error: 'Required field missing'\n      });\n    }\n\n    if (!solver.validate(req.body.puzzle)) {\n      console.log('Invalid characters in puzzle');\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    } else if (req.body.puzzle.length != 81) {\n      console.log('Expected puzzle to be 81 characters long');\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    solver.solve(req.body.puzzle);\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "config",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "console",
        "log",
        "body",
        "coordinate",
        "puzzle",
        "value",
        "json",
        "error",
        "coordinates",
        "split",
        "validate",
        "length",
        "checkValidCoordinates",
        "checkValidValue",
        "checkExactSquare",
        "valid",
        "valid_row",
        "checkRowPlacement",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement",
        "errors",
        "filter",
        "i",
        "conflicts",
        "map",
        "e",
        "conflict",
        "solve"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nrequire('dotenv').config();\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      console.log(\"\\n\\n\")\n      console.log(req.body)\n      console.log(req.body.coordinate)\n      if ( !req.body.puzzle || !req.body.coordinate || !req.body.value ) {\n        console.log('Required field(s) missing')\n        return res.json({ error: 'Required field(s) missing' })\n      }\n      let coordinates = req.body.coordinate.split('')\n      if (!solver.validate(req.body.puzzle)) {\n        console.log('Invalid characters in puzzle')\n        return res.json({ error: 'Invalid characters in puzzle' })\n      } else if (req.body.puzzle.length != 81) {\n        console.log('Expected puzzle to be 81 characters long')\n        return res.json({ error: 'Expected puzzle to be 81 characters long' })\n      }\n\n      if (solver.checkValidCoordinates(coordinates) == false) {\n        console.log('Invalid coordinate')\n        return res.json({ error: 'Invalid coordinate'})\n      } else if (solver.checkValidValue(req.body.value) == false) {\n        console.log('Invalid valid')\n        return res.json({ error: 'Invalid value'})\n      }\n\n      if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n        return res.json({ valid: true })\n      }\n      let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false)\n      console.log(errors)\n      let conflicts = errors.map(e => e[0])\n      if (errors.length > 0) {\n        return res.json({ valid: false, conflict: conflicts })\n      }\n      return res.json({ valid: true })\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n      console.log(req.body)\n      if ( !req.body.puzzle ) {\n        console.log('Required field(s) missing')\n        return res.json({ error: 'Required field missing' })\n      }\n\n      if (!solver.validate(req.body.puzzle)) {\n        console.log('Invalid characters in puzzle')\n        return res.json({ error: 'Invalid characters in puzzle' })\n      } else if (req.body.puzzle.length != 81) {\n        console.log('Expected puzzle to be 81 characters long')\n        return res.json({ error: 'Expected puzzle to be 81 characters long' })\n      }\n      solver.solve(req.body.puzzle)\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681295742212
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkValidCoordinates(coordinates) {\n    if (coordinates.length > 2) return false;\n    let chars = /[A-I]/i;\n    let nums = /[1-9]/;\n\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkValidValue(value) {\n    if (value.length > 1) return false;\n    let nums = /[1-9]/;\n    return nums.test(value);\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = row_letter.toUpperCase().charCodeAt(0) % 65 * 9;\n    let index = row_multiplier + (column - 1);\n    return puzzleString[index] != '.' && puzzleString[index] == value;\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65; // console.log(\"Row index: \" + row_index)\n\n    let row = puzzleString.split('').slice(row_index, row_index + 9); // console.log(\"Good row value? \" + !row.some((item) => item == value))\n\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num); // console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i >= row_group * 27 && i < (row_group + 1) * 27);\n    let region = row_extract.filter((_num, i) => {\n      return i % 9 >= col_group * 3 && i % 9 <= (col_group + 1) * 3 - 1;\n    });\n    return !region.some(item => item == value);\n  }\n\n  solve(puzzleString) {\n    console.log(this.transform(puzzleString));\n  }\n\n  transform(puzzleString) {\n    let grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n    let row = -1;\n    let col = 0;\n\n    for (let i = 0; i < puzzleString.length; i++) {\n      if (i % 9 == 0) {\n        row++;\n      }\n\n      if (col % 9 == 0) {\n        col = 0;\n      }\n\n      grid[row][col] = puzzleString[i] === '.' ? 0 : +puzzleString[i];\n      col++;\n    }\n\n    return grid;\n  }\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tWYWxpZENvb3JkaW5hdGVzIiwiY29vcmRpbmF0ZXMiLCJsZW5ndGgiLCJjaGFycyIsIm51bXMiLCJjaGVja1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsImNoZWNrRXhhY3RTcXVhcmUiLCJyb3dfbGV0dGVyIiwiY29sdW1uIiwicm93X211bHRpcGxpZXIiLCJ0b1VwcGVyQ2FzZSIsImNoYXJDb2RlQXQiLCJpbmRleCIsImNoZWNrUm93UGxhY2VtZW50Iiwicm93X2luZGV4Iiwicm93Iiwic3BsaXQiLCJzbGljZSIsInNvbWUiLCJpdGVtIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJjb2xfbnVtIiwiYXJyYXkiLCJjb2xfZXh0cmFjdCIsImZpbHRlciIsIl9udW0iLCJpIiwibnVtIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJyb3dfZ3JvdXAiLCJNYXRoIiwiZmxvb3IiLCJjb2xfZ3JvdXAiLCJyb3dfZXh0cmFjdCIsInJlZ2lvbiIsInNvbHZlIiwiY29uc29sZSIsImxvZyIsInRyYW5zZm9ybSIsImdyaWQiLCJjb2wiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxZQUFOLENBQW1CO0FBRWpCQyxFQUFBQSxRQUFRLENBQUNDLFlBQUQsRUFBZTtBQUNyQixRQUFJQyxHQUFHLEdBQUcsV0FBVjtBQUNBLFdBQU9BLEdBQUcsQ0FBQ0MsSUFBSixDQUFTRixZQUFULENBQVA7QUFDRDs7QUFFREcsRUFBQUEscUJBQXFCLENBQUNDLFdBQUQsRUFBYztBQUNqQyxRQUFJQSxXQUFXLENBQUNDLE1BQVosR0FBcUIsQ0FBekIsRUFBNEIsT0FBTyxLQUFQO0FBQzVCLFFBQUlDLEtBQUssR0FBRyxRQUFaO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLE9BQVg7O0FBQ0EsUUFBSUQsS0FBSyxDQUFDSixJ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QUFDRDs7QUFFREQsTUFBQUEsSUFBSSxDQUFDeEIsR0FBRCxDQUFKLENBQVV5QixHQUFWLElBQWlCNUMsWUFBWSxDQUFDOEIsQ0FBRCxDQUFaLEtBQW9CLEdBQXBCLEdBQTBCLENBQTFCLEdBQThCLENBQUM5QixZQUFZLENBQUM4QixDQUFELENBQTVEO0FBQ0FjLE1BQUFBLEdBQUc7QUFDSjs7QUFDRCxXQUFPRCxJQUFQO0FBQ0Q7O0FBekZnQjs7QUE2Rm5CRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJoRCxZQUFqQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZmlubmNqL2NvZGUvZmlubmlhbmovZnJlZWNvZGVjYW1wL3F1YWxpdHlfYXNzdXJhbmNlL3Byb2plY3RzL3N1ZG9rdV9zb2x2ZXIvY29udHJvbGxlcnMvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU3Vkb2t1U29sdmVyIHtcblxuICB2YWxpZGF0ZShwdXp6bGVTdHJpbmcpIHtcbiAgICBsZXQgcmVnID0gL15bXFxkXFwuXSokL1xuICAgIHJldHVybiByZWcudGVzdChwdXp6bGVTdHJpbmcpXG4gIH1cblxuICBjaGVja1ZhbGlkQ29vcmRpbmF0ZXMoY29vcmRpbmF0ZXMpIHtcbiAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoID4gMikgcmV0dXJuIGZhbHNlXG4gICAgbGV0IGNoYXJzID0gL1tBLUldL2lcbiAgICBsZXQgbnVtcyA9IC9bMS05XS9cbiAgICBpZiAoY2hhcnMudGVzdChjb29yZGluYXRlc1swXSkgJiYgbnVtcy50ZXN0KGNvb3JkaW5hdGVzWzFdKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBjaGVja1ZhbGlkVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUubGVuZ3RoID4gMSkgcmV0dXJuIGZhbHNlXG4gICAgbGV0IG51bXMgPSAvWzEtOV0vXG4gICAgcmV0dXJuIG51bXMudGVzdCh2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrRXhhY3RTcXVhcmUocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IHJvd19tdWx0aXBsaWVyID0gKHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApICUgNjUpICogOVxuICAgIGxldCBpbmRleCA9IHJvd19tdWx0aXBsaWVyICsgKGNvbHVtbiAtIDEpXG4gICAgcmV0dXJuIChwdXp6bGVTdHJpbmdbaW5kZXhdICE9ICcuJyAmJiBwdXp6bGVTdHJpbmdbaW5kZXhdID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSb3dQbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19pbmRleCA9IChyb3dfbGV0dGVyICUgNjUpO1xuICAgIC8vIGNvbnNvbGUubG9nKFwiUm93IGluZGV4OiBcIiArIHJvd19pbmRleClcbiAgICBsZXQgcm93ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKS5zbGljZShyb3dfaW5kZXgsIChyb3dfaW5kZXggKyA5KSlcbiAgICAvLyBjb25zb2xlLmxvZyhcIkdvb2Qgcm93IHZhbHVlPyBcIiArICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSkpXG4gICAgcmV0dXJuICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrQ29sUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93LCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IGNvbF9udW0gPSBjb2x1bW4gLSAxXG4gICAgbGV0IGFycmF5ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKVxuICAgIGxldCBjb2xfZXh0cmFjdCA9IGFycmF5LmZpbHRlcigoX251bSwgaSkgPT4gaSAlIDkgPT0gY29sX251bSlcbiAgICAvLyBjb25zb2xlLmxvZyhcIkdvb2QgY29sdW1uIHZhbHVlPyBcIiArICFjb2xfZXh0cmFjdC5zb21lKG51bSA9PiBudW0gPT0gdmFsdWUpKVxuICAgIHJldHVybiAhY29sX2V4dHJhY3Quc29tZShudW0gPT4gbnVtID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSZWdpb25QbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19ncm91cCA9IE1hdGguZmxvb3IoKHJvd19sZXR0ZXIgJSA2NSkgLyAzKTtcbiAgICBsZXQgY29sX2dyb3VwID0gTWF0aC5mbG9vcigoY29sdW1uIC0gMSkgLyAzKTtcbiAgICBsZXQgYXJyYXkgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpXG4gICAgbGV0IHJvd19leHRyYWN0ID0gYXJyYXkuZmlsdGVyKChfbnVtLCBpKSA9PiAoaSA+PSAocm93X2dyb3VwICogMjcpICYmIGkgPCAoKHJvd19ncm91cCArIDEpICogMjcpKSlcbiAgICBsZXQgcmVnaW9uID0gcm93X2V4dHJhY3QuZmlsdGVyKChfbnVtLCBpKSA9PiB7XG4gICAgICByZXR1cm4gKChpICUgOSkgPj0gY29sX2dyb3VwICogMykgJiYgKChpICUgOSkgPD0gKCgoY29sX2dyb3VwICsgMSkgKiAzKSAtIDEpKVxuICAgIH0pXG4gICAgcmV0dXJuICFyZWdpb24uc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIHNvbHZlKHB1enpsZVN0cmluZykge1xuICAgIGNvbnNvbGUubG9nKHRoaXMudHJhbnNmb3JtKHB1enpsZVN0cmluZykpXG4gIH1cblxuICB0cmFuc2Zvcm0ocHV6emxlU3RyaW5nKSB7XG4gICAgbGV0IGdyaWQgPSBbXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF1cbiAgICBdO1xuICAgIGxldCByb3cgPSAtMVxuICAgIGxldCBjb2wgPSAwXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHB1enpsZVN0cmluZy5sZW5ndGg7IGkgKyspIHtcbiAgICAgIGlmIChpICUgOSA9PSAwKSB7XG4gICAgICAgIHJvdysrXG4gICAgICB9XG4gICAgICBpZiAoY29sICUgOSA9PSAwKSB7XG4gICAgICAgIGNvbCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGdyaWRbcm93XVtjb2xdID0gcHV6emxlU3RyaW5nW2ldID09PSAnLicgPyAwIDogK3B1enpsZVN0cmluZ1tpXTtcbiAgICAgIGNvbCsrO1xuICAgIH1cbiAgICByZXR1cm4gZ3JpZDtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vkb2t1U29sdmVyO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkValidCoordinates",
        "coordinates",
        "length",
        "chars",
        "nums",
        "checkValidValue",
        "value",
        "checkExactSquare",
        "row_letter",
        "column",
        "row_multiplier",
        "toUpperCase",
        "charCodeAt",
        "index",
        "checkRowPlacement",
        "row_index",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "region",
        "solve",
        "console",
        "log",
        "transform",
        "grid",
        "col",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkValidCoordinates(coordinates) {\n    if (coordinates.length > 2) return false\n    let chars = /[A-I]/i\n    let nums = /[1-9]/\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true\n    }\n    return false\n  }\n\n  checkValidValue(value) {\n    if (value.length > 1) return false\n    let nums = /[1-9]/\n    return nums.test(value)\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = (row_letter.toUpperCase().charCodeAt(0) % 65) * 9\n    let index = row_multiplier + (column - 1)\n    return (puzzleString[index] != '.' && puzzleString[index] == value)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    // console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 9))\n    // console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    // console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => (i >= (row_group * 27) && i < ((row_group + 1) * 27)))\n    let region = row_extract.filter((_num, i) => {\n      return ((i % 9) >= col_group * 3) && ((i % 9) <= (((col_group + 1) * 3) - 1))\n    })\n    return !region.some((item) => item == value)\n  }\n\n  solve(puzzleString) {\n    console.log(this.transform(puzzleString))\n  }\n\n  transform(puzzleString) {\n    let grid = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ];\n    let row = -1\n    let col = 0\n\n    for (let i = 0; i < puzzleString.length; i ++) {\n      if (i % 9 == 0) {\n        row++\n      }\n      if (col % 9 == 0) {\n        col = 0;\n      }\n\n      grid[row][col] = puzzleString[i] === '.' ? 0 : +puzzleString[i];\n      col++;\n    }\n    return grid;\n  }\n\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681295936519
  }
}