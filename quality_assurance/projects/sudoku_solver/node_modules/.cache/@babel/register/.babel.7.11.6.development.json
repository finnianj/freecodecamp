{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    console.log(req.body);\n    let coordinates = req.body.coordinate.split('');\n    solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value);\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9uZ29vc2UiLCJjb25maWciLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJzb2x2ZXIiLCJyb3V0ZSIsInBvc3QiLCJyZXEiLCJyZXMiLCJib2R5IiwiY29vcmRpbmF0ZXMiLCJjb29yZGluYXRlIiwic3BsaXQiLCJjaGVja1Jvd1BsYWNlbWVudCIsInB1enpsZSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxpQ0FBRCxDQUE1Qjs7QUFDQTs7QUFDQSxJQUFJQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCRSxNQUFsQixHLENBRUE7OztBQUVBRCxRQUFRLENBQUNFLE9BQVQsQ0FBaUJDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUE3QixFQUFvQztBQUFFQyxFQUFBQSxlQUFlLEVBQUUsSUFBbkI7QUFBeUJDLEVBQUFBLGtCQUFrQixFQUFFO0FBQTdDLENBQXBDLEVBQXdGQyxJQUF4RixDQUE2RixNQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBWixDQUFuRyxFQUNDQyxLQURELENBQ09DLEdBQUcsSUFBSUgsT0FBTyxDQUFDQyxHQUFSLENBQVlFLEdBQVosQ0FEZCxFLENBR0E7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFFOUIsTUFBSUMsTUFBTSxHQUFHLElBQUlsQixZQUFKLEVBQWI7QUFFQWlCLEVBQUFBLEdBQUcsQ0FBQ0UsS0FBSixDQUFVLFlBQVYsRUFDR0MsSUFESCxDQUNRLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ2xCWCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVMsR0FBRyxDQUFDRSxJQUFoQjtBQUNBLFFBQUlDLFdBQVcsR0FBR0gsR0FBRyxDQUFDRSxJQUFKLENBQVNFLFVBQVQsQ0FBb0JDLEtBQXBCLENBQTBCLEVBQTFCLENBQWxCO0FBQ0FSLElBQUFBLE1BQU0sQ0FBQ1MsaUJBQVAsQ0FBeUJOLEdBQUcsQ0FBQ0UsSUFBSixDQUFTSyxNQUFsQyxFQUEwQ0osV0FBVyxDQUFDLENBQUQsQ0FBckQsRUFBMERBLFdBQVcsQ0FBQyxDQUFELENBQXJFLEVBQTBFSCxHQUFHLENBQUNFLElBQUosQ0FBU00sS0FBbkY7QUFFRCxHQU5IO0FBUUFaLEVBQUFBLEdBQUcsQ0FBQ0UsS0FBSixDQUFVLFlBQVYsRUFDR0MsSUFESCxDQUNRLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjLENBRW5CLENBSEg7QUFJRCxDQWhCRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZmlubmNqL2NvZGUvZmlubmlhbmovZnJlZWNvZGVjYW1wL3F1YWxpdHlfYXNzdXJhbmNlL3Byb2plY3RzL3N1ZG9rdV9zb2x2ZXIvcm91dGVzLyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3Vkb2t1U29sdmVyID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMvc3Vkb2t1LXNvbHZlci5qcycpO1xuJ3VzZSBzdHJpY3QnO1xubGV0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcblxuLy8gLS0tLS0tLS0tIE1vbmdvIERCIGNvbmZpZyAtLS0tLS0tLS0tLS0tXG5cbm1vbmdvb3NlLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR08sIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLCB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWV9KS50aGVuKCgpID0+IGNvbnNvbGUubG9nKFwiTW9uZ29kYiBjb25uZWN0ZWRcIikpXG4uY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBwKSB7XG5cbiAgbGV0IHNvbHZlciA9IG5ldyBTdWRva3VTb2x2ZXIoKTtcblxuICBhcHAucm91dGUoJy9hcGkvY2hlY2snKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuICAgICAgY29uc29sZS5sb2cocmVxLmJvZHkpXG4gICAgICBsZXQgY29vcmRpbmF0ZXMgPSByZXEuYm9keS5jb29yZGluYXRlLnNwbGl0KCcnKVxuICAgICAgc29sdmVyLmNoZWNrUm93UGxhY2VtZW50KHJlcS5ib2R5LnB1enpsZSwgY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzFdLCByZXEuYm9keS52YWx1ZSlcblxuICAgIH0pO1xuXG4gIGFwcC5yb3V0ZSgnL2FwaS9zb2x2ZScpXG4gICAgLnBvc3QoKHJlcSwgcmVzKSA9PiB7XG5cbiAgICB9KTtcbn07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "coordinates",
        "coordinate",
        "split",
        "checkRowPlacement",
        "puzzle",
        "value"
      ],
      "mappings": "AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iCAAD,CAA5B;;AACA;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBE,MAAlB,G,CAEA;;;AAEAD,QAAQ,CAACE,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,KAA7B,EAAoC;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAApC,EAAwFC,IAAxF,CAA6F,MAAMC,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAnG,EACCC,KADD,CACOC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CADd,E,CAGA;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAE9B,MAAIC,MAAM,GAAG,IAAIlB,YAAJ,EAAb;AAEAiB,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClBX,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACE,IAAhB;AACA,QAAIC,WAAW,GAAGH,GAAG,CAACE,IAAJ,CAASE,UAAT,CAAoBC,KAApB,CAA0B,EAA1B,CAAlB;AACAR,IAAAA,MAAM,CAACS,iBAAP,CAAyBN,GAAG,CAACE,IAAJ,CAASK,MAAlC,EAA0CJ,WAAW,CAAC,CAAD,CAArD,EAA0DA,WAAW,CAAC,CAAD,CAArE,EAA0EH,GAAG,CAACE,IAAJ,CAASM,KAAnF;AAED,GANH;AAQAZ,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc,CAEnB,CAHH;AAID,CAhBD",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      console.log(req.body)\n      let coordinates = req.body.coordinate.split('')\n      solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)\n\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681198798825
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65;\n    console.log(\"Row index: \" + row_index);\n    let row = puzzleString.split('').slice(row_index, row_index + 10);\n    return row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {}\n\n  checkRegionPlacement(puzzleString, row, column, value) {}\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tSb3dQbGFjZW1lbnQiLCJyb3dfbGV0dGVyIiwiY29sdW1uIiwidmFsdWUiLCJ0b1VwcGVyQ2FzZSIsImNoYXJDb2RlQXQiLCJyb3dfaW5kZXgiLCJjb25zb2xlIiwibG9nIiwicm93Iiwic3BsaXQiLCJzbGljZSIsInNvbWUiLCJpdGVtIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJjaGVja1JlZ2lvblBsYWNlbWVudCIsInNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsWUFBTixDQUFtQjtBQUVqQkMsRUFBQUEsUUFBUSxDQUFDQyxZQUFELEVBQWU7QUFDckIsUUFBSUMsR0FBRyxHQUFHLFlBQVY7QUFDQSxXQUFPQSxHQUFHLENBQUNDLElBQUosQ0FBU0YsWUFBVCxDQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLGlCQUFpQixDQUFDSCxZQUFELEVBQWVJLFVBQWYsRUFBMkJDLE1BQTNCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUN6REYsSUFBQUEsVUFBVSxHQUFHQSxVQUFVLENBQUNHLFdBQVgsR0FBeUJDLFVBQXpCLENBQW9DLENBQXBDLENBQWI7QUFDQSxRQUFJQyxTQUFTLEdBQUlMLFVBQVUsR0FBRyxFQUE5QjtBQUNBTSxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxnQkFBZ0JGLFNBQTVCO0FBQ0EsUUFBSUcsR0FBRyxHQUFHWixZQUFZLENBQUNhLEtBQWIsQ0FBbUIsRUFBbkIsRUFBdUJDLEtBQXZCLENBQTZCTCxTQUE3QixFQUF5Q0EsU0FBUyxHQUFHLEVBQXJELENBQVY7QUFDQSxXQUFPRyxHQUFHLENBQUNHLElBQUosQ0FBVUMsSUFBRCxJQUFVQSxJQUFJLElBQUlWLEtBQTNCLENBQVA7QUFDRDs7QUFFRFcsRUFBQUEsaUJBQWlCLENBQUNqQixZQUFELEVBQWVZLEdBQWYsRUFBb0JQLE1BQXBCLEVBQTRCQyxLQUE1QixFQUFtQyxDQUVuRDs7QUFFRFksRUFBQUEsb0JBQW9CLENBQUNsQixZQUFELEVBQWVZLEdBQWYsRUFBb0JQLE1BQXBCLEVBQTRCQyxLQUE1QixFQUFtQyxDQUV0RDs7QUFFRGEsRUFBQUEsS0FBSyxDQUFDbkIsWUFBRCxFQUFlLENBRW5COztBQXpCZ0I7O0FBNEJuQm9CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLFlBQWpCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9maW5uY2ovY29kZS9maW5uaWFuai9mcmVlY29kZWNhbXAvcXVhbGl0eV9hc3N1cmFuY2UvcHJvamVjdHMvc3Vkb2t1X3NvbHZlci9jb250cm9sbGVycy8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTdWRva3VTb2x2ZXIge1xuXG4gIHZhbGlkYXRlKHB1enpsZVN0cmluZykge1xuICAgIGxldCByZWcgPSAvXltcXGRcXC4vXSokL1xuICAgIHJldHVybiByZWcudGVzdChwdXp6bGVTdHJpbmcpXG4gIH1cblxuICBjaGVja1Jvd1BsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvd19sZXR0ZXIsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICByb3dfbGV0dGVyID0gcm93X2xldHRlci50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMClcbiAgICBsZXQgcm93X2luZGV4ID0gKHJvd19sZXR0ZXIgJSA2NSk7XG4gICAgY29uc29sZS5sb2coXCJSb3cgaW5kZXg6IFwiICsgcm93X2luZGV4KVxuICAgIGxldCByb3cgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpLnNsaWNlKHJvd19pbmRleCwgKHJvd19pbmRleCArIDEwKSlcbiAgICByZXR1cm4gcm93LnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT0gdmFsdWUpXG4gIH1cblxuICBjaGVja0NvbFBsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvdywgY29sdW1uLCB2YWx1ZSkge1xuXG4gIH1cblxuICBjaGVja1JlZ2lvblBsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvdywgY29sdW1uLCB2YWx1ZSkge1xuXG4gIH1cblxuICBzb2x2ZShwdXp6bGVTdHJpbmcpIHtcblxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vkb2t1U29sdmVyO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkRowPlacement",
        "row_letter",
        "column",
        "value",
        "toUpperCase",
        "charCodeAt",
        "row_index",
        "console",
        "log",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "checkRegionPlacement",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,YAAN,CAAmB;AAEjBC,EAAAA,QAAQ,CAACC,YAAD,EAAe;AACrB,QAAIC,GAAG,GAAG,YAAV;AACA,WAAOA,GAAG,CAACC,IAAJ,CAASF,YAAT,CAAP;AACD;;AAEDG,EAAAA,iBAAiB,CAACH,YAAD,EAAeI,UAAf,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AACzDF,IAAAA,UAAU,GAAGA,UAAU,CAACG,WAAX,GAAyBC,UAAzB,CAAoC,CAApC,CAAb;AACA,QAAIC,SAAS,GAAIL,UAAU,GAAG,EAA9B;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,SAA5B;AACA,QAAIG,GAAG,GAAGZ,YAAY,CAACa,KAAb,CAAmB,EAAnB,EAAuBC,KAAvB,CAA6BL,SAA7B,EAAyCA,SAAS,GAAG,EAArD,CAAV;AACA,WAAOG,GAAG,CAACG,IAAJ,CAAUC,IAAD,IAAUA,IAAI,IAAIV,KAA3B,CAAP;AACD;;AAEDW,EAAAA,iBAAiB,CAACjB,YAAD,EAAeY,GAAf,EAAoBP,MAApB,EAA4BC,KAA5B,EAAmC,CAEnD;;AAEDY,EAAAA,oBAAoB,CAAClB,YAAD,EAAeY,GAAf,EAAoBP,MAApB,EAA4BC,KAA5B,EAAmC,CAEtD;;AAEDa,EAAAA,KAAK,CAACnB,YAAD,EAAe,CAEnB;;AAzBgB;;AA4BnBoB,MAAM,CAACC,OAAP,GAAiBvB,YAAjB",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 10))\n    return row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681201097326
  }
}