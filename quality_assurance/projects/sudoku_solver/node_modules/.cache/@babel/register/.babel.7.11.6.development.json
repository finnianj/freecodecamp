{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let coordinates = req.body.coordinate.split('');\n\n    if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n      return res.json({\n        valid: true\n      });\n    }\n\n    let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false);\n    console.log(errors);\n    let conflicts = errors.map(e => e[0]);\n\n    if (errors.length > 0) {\n      return res.json({\n        valid: false,\n        conflicts: conflicts\n      });\n    }\n\n    return res.json({\n      valid: true\n    });\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9uZ29vc2UiLCJjb25maWciLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJzb2x2ZXIiLCJyb3V0ZSIsInBvc3QiLCJyZXEiLCJyZXMiLCJjb29yZGluYXRlcyIsImJvZHkiLCJjb29yZGluYXRlIiwic3BsaXQiLCJjaGVja0V4YWN0U3F1YXJlIiwicHV6emxlIiwidmFsdWUiLCJqc29uIiwidmFsaWQiLCJ2YWxpZF9yb3ciLCJjaGVja1Jvd1BsYWNlbWVudCIsInZhbGlkX2NvbCIsImNoZWNrQ29sUGxhY2VtZW50IiwidmFsaWRfcmVnIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJlcnJvcnMiLCJmaWx0ZXIiLCJpIiwiY29uZmxpY3RzIiwibWFwIiwiZSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsaUNBQUQsQ0FBNUI7O0FBQ0E7O0FBQ0EsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQUEsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkUsTUFBbEIsRyxDQUVBOzs7QUFFQUQsUUFBUSxDQUFDRSxPQUFULENBQWlCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsS0FBN0IsRUFBb0M7QUFBRUMsRUFBQUEsZUFBZSxFQUFFLElBQW5CO0FBQXlCQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUE3QyxDQUFwQyxFQUF3RkMsSUFBeEYsQ0FBNkYsTUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVksbUJBQVosQ0FBbkcsRUFDQ0MsS0FERCxDQUNPQyxHQUFHLElBQUlILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxHQUFaLENBRGQsRSxDQUdBOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlO0FBRTlCLE1BQUlDLE1BQU0sR0FBRyxJQUFJbEIsWUFBSixFQUFiO0FBRUFpQixFQUFBQSxHQUFHLENBQUNFLEtBQUosQ0FBVSxZQUFWLEVBQ0dDLElBREgsQ0FDUSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUNsQixRQUFJQyxXQUFXLEdBQUdGLEdBQUcsQ0FBQ0csSUFBSixDQUFTQyxVQUFULENBQW9CQyxLQUFwQixDQUEwQixFQUExQixDQUFsQjs7QUFDQSxRQUFJUixNQUFNLENBQUNTLGdCQUFQLENBQXdCTixHQUFHLENBQUNHLElBQUosQ0FBU0ksTUFBakMsRUFBeUNMLFdBQVcsQ0FBQyxDQUFELENBQXBELEVBQXlEQSxXQUFXLENBQUMsQ0FBRCxDQUFwRSxFQUF5RUYsR0FBRyxDQUFDRyxJQUFKLENBQVNLLEtBQWxGLENBQUosRUFBOEY7QUFDNUYsYUFBT1AsR0FBRyxDQUFDUSxJQUFKLENBQVM7QUFBRUMsUUFBQUEsS0FBSyxFQUFFO0FBQVQsT0FBVCxDQUFQO0FBQ0Q7O0FBQ0QsUUFBSUMsU0FBUyxHQUFHLENBQUMsS0FBRCxFQUFRZCxNQUFNLENBQUNlLGlCQUFQLENBQXlCWixHQUFHLENBQUNHLElBQUosQ0FBU0ksTUFBbEMsRUFBMENMLFdBQVcsQ0FBQyxDQUFELENBQXJELEVBQTBEQSxXQUFXLENBQUMsQ0FBRCxDQUFyRSxFQUEwRUYsR0FBRyxDQUFDRyxJQUFKLENBQVNLLEtBQW5GLENBQVIsQ0FBaEI7QUFDQSxRQUFJSyxTQUFTLEdBQUcsQ0FBQyxRQUFELEVBQVdoQixNQUFNLENBQUNpQixpQkFBUCxDQUF5QmQsR0FBRyxDQUFDRyxJQUFKLENBQVNJLE1BQWxDLEVBQTBDTCxXQUFXLENBQUMsQ0FBRCxDQUFyRCxFQUEwREEsV0FBVyxDQUFDLENBQUQsQ0FBckUsRUFBMEVGLEdBQUcsQ0FBQ0csSUFBSixDQUFTSyxLQUFuRixDQUFYLENBQWhCO0FBQ0EsUUFBSU8sU0FBUyxHQUFHLENBQUMsUUFBRCxFQUFXbEIsTUFBTSxDQUFDbUIsb0JBQVAsQ0FBNEJoQixHQUFHLENBQUNHLElBQUosQ0FBU0ksTUFBckMsRUFBNkNMLFdBQVcsQ0FBQyxDQUFELENBQXhELEVBQTZEQSxXQUFXLENBQUMsQ0FBRCxDQUF4RSxFQUE2RUYsR0FBRyxDQUFDRyxJQUFKLENBQVNLLEtBQXRGLENBQVgsQ0FBaEI7QUFDQSxRQUFJUyxNQUFNLEdBQUcsQ0FBQ04sU0FBRCxFQUFZRSxTQUFaLEVBQXVCRSxTQUF2QixFQUFrQ0csTUFBbEMsQ0FBeUNDLENBQUMsSUFBSUEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLEtBQXRELENBQWI7QUFDQTdCLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZMEIsTUFBWjtBQUNBLFFBQUlHLFNBQVMsR0FBR0gsTUFBTSxDQUFDSSxHQUFQLENBQVdDLENBQUMsSUFBSUEsQ0FBQyxDQUFDLENBQUQsQ0FBakIsQ0FBaEI7O0FBQ0EsUUFBSUwsTUFBTSxDQUFDTSxNQUFQLEdBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLGFBQU90QixHQUFHLENBQUNRLElBQUosQ0FBUztBQUFFQyxRQUFBQSxLQUFLLEVBQUUsS0FBVDtBQUFnQlUsUUFBQUEsU0FBUyxFQUFFQTtBQUEzQixPQUFULENBQVA7QUFDRDs7QUFDRCxXQUFPbkIsR0FBRyxDQUFDUSxJQUFKLENBQVM7QUFBRUMsTUFBQUEsS0FBSyxFQUFFO0FBQVQsS0FBVCxDQUFQO0FBQ0QsR0FoQkg7QUFrQkFkLEVBQUFBLEdBQUcsQ0FBQ0UsS0FBSixDQUFVLFlBQVYsRUFDR0MsSUFESCxDQUNRLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjLENBRW5CLENBSEg7QUFJRCxDQTFCRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZmlubmNqL2NvZGUvZmlubmlhbmovZnJlZWNvZGVjYW1wL3F1YWxpdHlfYXNzdXJhbmNlL3Byb2plY3RzL3N1ZG9rdV9zb2x2ZXIvcm91dGVzLyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3Vkb2t1U29sdmVyID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMvc3Vkb2t1LXNvbHZlci5qcycpO1xuJ3VzZSBzdHJpY3QnO1xubGV0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcblxuLy8gLS0tLS0tLS0tIE1vbmdvIERCIGNvbmZpZyAtLS0tLS0tLS0tLS0tXG5cbm1vbmdvb3NlLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR08sIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLCB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWV9KS50aGVuKCgpID0+IGNvbnNvbGUubG9nKFwiTW9uZ29kYiBjb25uZWN0ZWRcIikpXG4uY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBwKSB7XG5cbiAgbGV0IHNvbHZlciA9IG5ldyBTdWRva3VTb2x2ZXIoKTtcblxuICBhcHAucm91dGUoJy9hcGkvY2hlY2snKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gcmVxLmJvZHkuY29vcmRpbmF0ZS5zcGxpdCgnJylcbiAgICAgIGlmIChzb2x2ZXIuY2hlY2tFeGFjdFNxdWFyZShyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7IHZhbGlkOiB0cnVlIH0pXG4gICAgICB9XG4gICAgICBsZXQgdmFsaWRfcm93ID0gW1wicm93XCIsIHNvbHZlci5jaGVja1Jvd1BsYWNlbWVudChyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpXVxuICAgICAgbGV0IHZhbGlkX2NvbCA9IFtcImNvbHVtblwiLCBzb2x2ZXIuY2hlY2tDb2xQbGFjZW1lbnQocmVxLmJvZHkucHV6emxlLCBjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIHJlcS5ib2R5LnZhbHVlKV1cbiAgICAgIGxldCB2YWxpZF9yZWcgPSBbXCJyZWdpb25cIiwgc29sdmVyLmNoZWNrUmVnaW9uUGxhY2VtZW50KHJlcS5ib2R5LnB1enpsZSwgY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzFdLCByZXEuYm9keS52YWx1ZSldXG4gICAgICBsZXQgZXJyb3JzID0gW3ZhbGlkX3JvdywgdmFsaWRfY29sLCB2YWxpZF9yZWddLmZpbHRlcihpID0+IGlbMV0gPT0gZmFsc2UpXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcnMpXG4gICAgICBsZXQgY29uZmxpY3RzID0gZXJyb3JzLm1hcChlID0+IGVbMF0pXG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgdmFsaWQ6IGZhbHNlLCBjb25mbGljdHM6IGNvbmZsaWN0cyB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcy5qc29uKHsgdmFsaWQ6IHRydWUgfSlcbiAgICB9KTtcblxuICBhcHAucm91dGUoJy9hcGkvc29sdmUnKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuXG4gICAgfSk7XG59O1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "coordinates",
        "body",
        "coordinate",
        "split",
        "checkExactSquare",
        "puzzle",
        "value",
        "json",
        "valid",
        "valid_row",
        "checkRowPlacement",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement",
        "errors",
        "filter",
        "i",
        "conflicts",
        "map",
        "e",
        "length"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let coordinates = req.body.coordinate.split('')\n      if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n        return res.json({ valid: true })\n      }\n      let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false)\n      console.log(errors)\n      let conflicts = errors.map(e => e[0])\n      if (errors.length > 0) {\n        return res.json({ valid: false, conflicts: conflicts })\n      }\n      return res.json({ valid: true })\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681219577190
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = row_letter.toUpperCase().charCodeAt(0) % 65 * 9;\n    let index = row_multiplier + (column - 1);\n    return puzzleString[index] != '.' && puzzleString[index] == value;\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65;\n    console.log(\"Row index: \" + row_index);\n    let row = puzzleString.split('').slice(row_index, row_index + 10);\n    console.log(\"Good row value? \" + !row.some(item => item == value));\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num);\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value));\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i >= row_group * 27 && i < (row_group + 1) * 27);\n    let region = row_extract.filter((_num, i) => {\n      return i % 9 >= col_group * 3 && i % 9 <= (col_group + 1) * 3 - 1;\n    });\n    return !region.some(item => item == value);\n  }\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tFeGFjdFNxdWFyZSIsInJvd19sZXR0ZXIiLCJjb2x1bW4iLCJ2YWx1ZSIsInJvd19tdWx0aXBsaWVyIiwidG9VcHBlckNhc2UiLCJjaGFyQ29kZUF0IiwiaW5kZXgiLCJjaGVja1Jvd1BsYWNlbWVudCIsInJvd19pbmRleCIsImNvbnNvbGUiLCJsb2ciLCJyb3ciLCJzcGxpdCIsInNsaWNlIiwic29tZSIsIml0ZW0iLCJjaGVja0NvbFBsYWNlbWVudCIsImNvbF9udW0iLCJhcnJheSIsImNvbF9leHRyYWN0IiwiZmlsdGVyIiwiX251bSIsImkiLCJudW0iLCJjaGVja1JlZ2lvblBsYWNlbWVudCIsInJvd19ncm91cCIsIk1hdGgiLCJmbG9vciIsImNvbF9ncm91cCIsInJvd19leHRyYWN0IiwicmVnaW9uIiwic29sdmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxZQUFOLENBQW1CO0FBRWpCQyxFQUFBQSxRQUFRLENBQUNDLFlBQUQsRUFBZTtBQUNyQixRQUFJQyxHQUFHLEdBQUcsWUFBVjtBQUNBLFdBQU9BLEdBQUcsQ0FBQ0MsSUFBSixDQUFTRixZQUFULENBQVA7QUFDRDs7QUFFREcsRUFBQUEsZ0JBQWdCLENBQUNILFlBQUQsRUFBZUksVUFBZixFQUEyQkMsTUFBM0IsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hELFFBQUlDLGNBQWMsR0FBSUgsVUFBVSxDQUFDSSxXQUFYLEdBQXlCQyxVQUF6QixDQUFvQyxDQUFwQyxJQUF5QyxFQUExQyxHQUFnRCxDQUFyRTtBQUNBLFFBQUlDLEtBQUssR0FBR0gsY0FBYyxJQUFJRixNQUFNLEdBQUcsQ0FBYixDQUExQjtBQUNBLFdBQVFMLFlBQVksQ0FBQ1UsS0FBRCxDQUFaLElBQXVCLEdBQXZCLElBQThCVixZQUFZLENB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QUFSO0FBQ0Q7O0FBRUQ2QixFQUFBQSxLQUFLLENBQUNuQyxZQUFELEVBQWUsQ0FFbkI7O0FBNUNnQjs7QUErQ25Cb0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkMsWUFBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2Zpbm5jai9jb2RlL2Zpbm5pYW5qL2ZyZWVjb2RlY2FtcC9xdWFsaXR5X2Fzc3VyYW5jZS9wcm9qZWN0cy9zdWRva3Vfc29sdmVyL2NvbnRyb2xsZXJzLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFN1ZG9rdVNvbHZlciB7XG5cbiAgdmFsaWRhdGUocHV6emxlU3RyaW5nKSB7XG4gICAgbGV0IHJlZyA9IC9eW1xcZFxcLi9dKiQvXG4gICAgcmV0dXJuIHJlZy50ZXN0KHB1enpsZVN0cmluZylcbiAgfVxuXG4gIGNoZWNrRXhhY3RTcXVhcmUocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IHJvd19tdWx0aXBsaWVyID0gKHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApICUgNjUpICogOVxuICAgIGxldCBpbmRleCA9IHJvd19tdWx0aXBsaWVyICsgKGNvbHVtbiAtIDEpXG4gICAgcmV0dXJuIChwdXp6bGVTdHJpbmdbaW5kZXhdICE9ICcuJyAmJiBwdXp6bGVTdHJpbmdbaW5kZXhdID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSb3dQbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19pbmRleCA9IChyb3dfbGV0dGVyICUgNjUpO1xuICAgIGNvbnNvbGUubG9nKFwiUm93IGluZGV4OiBcIiArIHJvd19pbmRleClcbiAgICBsZXQgcm93ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKS5zbGljZShyb3dfaW5kZXgsIChyb3dfaW5kZXggKyAxMCkpXG4gICAgY29uc29sZS5sb2coXCJHb29kIHJvdyB2YWx1ZT8gXCIgKyAhcm93LnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT0gdmFsdWUpKVxuICAgIHJldHVybiAhcm93LnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT0gdmFsdWUpXG4gIH1cblxuICBjaGVja0NvbFBsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvdywgY29sdW1uLCB2YWx1ZSkge1xuICAgIGxldCBjb2xfbnVtID0gY29sdW1uIC0gMVxuICAgIGxldCBhcnJheSA9IHB1enpsZVN0cmluZy5zcGxpdCgnJylcbiAgICBsZXQgY29sX2V4dHJhY3QgPSBhcnJheS5maWx0ZXIoKF9udW0sIGkpID0+IGkgJSA5ID09IGNvbF9udW0pXG4gICAgY29uc29sZS5sb2coXCJHb29kIGNvbHVtbiB2YWx1ZT8gXCIgKyAhY29sX2V4dHJhY3Quc29tZShudW0gPT4gbnVtID09IHZhbHVlKSlcbiAgICByZXR1cm4gIWNvbF9leHRyYWN0LnNvbWUobnVtID0+IG51bSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrUmVnaW9uUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93X2xldHRlciwgY29sdW1uLCB2YWx1ZSkge1xuICAgIHJvd19sZXR0ZXIgPSByb3dfbGV0dGVyLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKVxuICAgIGxldCByb3dfZ3JvdXAgPSBNYXRoLmZsb29yKChyb3dfbGV0dGVyICUgNjUpIC8gMyk7XG4gICAgbGV0IGNvbF9ncm91cCA9IE1hdGguZmxvb3IoKGNvbHVtbiAtIDEpIC8gMyk7XG4gICAgbGV0IGFycmF5ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKVxuICAgIGxldCByb3dfZXh0cmFjdCA9IGFycmF5LmZpbHRlcigoX251bSwgaSkgPT4gKGkgPj0gKHJvd19ncm91cCAqIDI3KSAmJiBpIDwgKChyb3dfZ3JvdXAgKyAxKSAqIDI3KSkpXG4gICAgbGV0IHJlZ2lvbiA9IHJvd19leHRyYWN0LmZpbHRlcigoX251bSwgaSkgPT4ge1xuICAgICAgcmV0dXJuICgoaSAlIDkpID49IGNvbF9ncm91cCAqIDMpICYmICgoaSAlIDkpIDw9ICgoKGNvbF9ncm91cCArIDEpICogMykgLSAxKSlcbiAgICB9KVxuICAgIHJldHVybiAhcmVnaW9uLnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT0gdmFsdWUpXG4gIH1cblxuICBzb2x2ZShwdXp6bGVTdHJpbmcpIHtcblxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vkb2t1U29sdmVyO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkExactSquare",
        "row_letter",
        "column",
        "value",
        "row_multiplier",
        "toUpperCase",
        "charCodeAt",
        "index",
        "checkRowPlacement",
        "row_index",
        "console",
        "log",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "region",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = (row_letter.toUpperCase().charCodeAt(0) % 65) * 9\n    let index = row_multiplier + (column - 1)\n    return (puzzleString[index] != '.' && puzzleString[index] == value)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 10))\n    console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => (i >= (row_group * 27) && i < ((row_group + 1) * 27)))\n    let region = row_extract.filter((_num, i) => {\n      return ((i % 9) >= col_group * 3) && ((i % 9) <= (((col_group + 1) * 3) - 1))\n    })\n    return !region.some((item) => item == value)\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681219758520
  }
}