{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let coordinates = req.body.coordinate.split('');\n    console.log(req.body);\n\n    if (req.body.puzzle == '' || req.body.coordinate == '' || req.body.value == '') {\n      res.json({\n        error: 'Required field(s) missing'\n      });\n    }\n\n    if (!solver.validate(req.body.puzzle)) {\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    } else if (req.body.puzzle.length != 81) {\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    if (solver.checkValidCoordinates(coordinates) == false) {\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    } else if (solver.checkValidValue(req.body.value) == false) {\n      return res.json({\n        error: 'Invalid value'\n      });\n    }\n\n    if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n      return res.json({\n        valid: true\n      });\n    }\n\n    let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false);\n    console.log(errors);\n    let conflicts = errors.map(e => e[0]);\n\n    if (errors.length > 0) {\n      return res.json({\n        valid: false,\n        conflicts: conflicts\n      });\n    }\n\n    return res.json({\n      valid: true\n    });\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9uZ29vc2UiLCJjb25maWciLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJzb2x2ZXIiLCJyb3V0ZSIsInBvc3QiLCJyZXEiLCJyZXMiLCJjb29yZGluYXRlcyIsImJvZHkiLCJjb29yZGluYXRlIiwic3BsaXQiLCJwdXp6bGUiLCJ2YWx1ZSIsImpzb24iLCJlcnJvciIsInZhbGlkYXRlIiwibGVuZ3RoIiwiY2hlY2tWYWxpZENvb3JkaW5hdGVzIiwiY2hlY2tWYWxpZFZhbHVlIiwiY2hlY2tFeGFjdFNxdWFyZSIsInZhbGlkIiwidmFsaWRfcm93IiwiY2hlY2tSb3dQbGFjZW1lbnQiLCJ2YWxpZF9jb2wiLCJjaGVja0NvbFBsYWNlbWVudCIsInZhbGlkX3JlZyIsImNoZWNrUmVnaW9uUGxhY2VtZW50IiwiZXJyb3JzIiwiZmlsdGVyIiwiaSIsImNvbmZsaWN0cyIsIm1hcCIsImUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGlDQUFELENBQTVCOztBQUNBOztBQUNBLElBQUlDLFFBQVEsR0FBR0QsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0FBLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JFLE1BQWxCLEcsQ0FFQTs7O0FBRUFELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQTdCLEVBQW9DO0FBQUVDLEVBQUFBLGVBQWUsRUFBRSxJQUFuQjtBQUF5QkMsRUFBQUEsa0JBQWtCLEVBQUU7QUFBN0MsQ0FBcEMsRUFBd0ZDLElBQXhGLENBQTZGLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG1CQUFaLENBQW5HLEVBQ0NDLEtBREQsQ0FDT0MsR0FBRyxJQUFJSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsR0FBWixDQURkLEUsQ0FHQTs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUU5QixNQUFJQyxNQUFNLEdBQUcsSUFBSWxCLFlBQUosRUFBYjtBQUVBaUIsRUFBQUEsR0FBRyxDQUFDRSxLQUFKLENBQVUsWUFBVixFQUNHQyxJQURILENBQ1EsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDbEIsUUFBSUMsV0FBVyxHQUFHRixHQUFHLENBQUNHLElBQUosQ0FBU0MsVUFBVCxDQUFvQkMsS0FBcEIsQ0FBMEIsRUFBMUIsQ0FBbEI7QUFDQWYsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlTLEdBQUcsQ0FBQ0csSUFBaEI7O0FBQ0EsUUFBSUgsR0FBRyxDQUFDRyxJQUFKLENBQVNHLE1BQVQsSUFBbUIsRUFBbkIsSUFBeUJOLEdBQUcsQ0FBQ0csSUFBSixDQUFTQyxVQUFULElBQXVCLEVBQWhELElBQXNESixHQUFHLENBQUNHLElBQUosQ0FBU0ksS0FBVCxJQUFrQixFQUE1RSxFQUFnRjtBQUM5RU4sTUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVM7QUFBRUMsUUFBQUEsS0FBSyxFQUFFO0FBQVQsT0FBVDtBQUNEOztBQUNELFFBQUksQ0FBQ1osTUFBTSxDQUFDYSxRQUFQLENBQWdCVixHQUFHLENBQUNHLElBQUosQ0FBU0csTUFBekIsQ0FBTCxFQUF1QztBQUNyQyxhQUFPTCxHQUFHLENBQUNPLElBQUosQ0FBUztBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBVCxPQUFULENBQVA7QUFDRCxLQUZELE1BRU8sSUFBSVQsR0FBRyxDQUFDRyxJQUFKLENBQVNHLE1BQVQsQ0FBZ0JLLE1BQWhCLElBQTBCLEVBQTlCLEVBQWtDO0FBQ3ZDLGFBQU9WLEdBQUcsQ0FBQ08sSUFBSixDQUFTO0FBQUVDLFFBQUFBLEtBQUssRUFBRTtBQUFULE9BQVQsQ0FBUDtBQUNEOztBQUVELFFBQUlaLE1BQU0sQ0FBQ2UscUJBQVAsQ0FBNkJWLFdBQTdCLEtBQTZDLEtBQWpELEVBQXdEO0FBQ3RELGFBQU9ELEdBQUcsQ0FBQ08sSUFBSixDQUFTO0FBQUVDLFFBQUFBLEtBQUssRUFBRTtBQUFULE9BQVQsQ0FBUDtBQUNELEtBRkQsTUFFTyxJQUFJWixNQUFNLENBQUNnQixlQUFQLENBQXVCYixHQUFHLENBQUNHLElBQUosQ0FBU0ksS0FBaEMsS0FBMEMsS0FBOUMsRUFBcUQ7QUFDMUQsYUFBT04sR0FBRyxDQUFDTyxJQUFKLENBQVM7QUFBRUMsUUFBQUEsS0FBSyxFQUFFO0FBQVQsT0FBVCxDQUFQO0FBQ0Q7O0FBRUQsUUFBSVosTUFBTSxDQUFDaUIsZ0JBQVAsQ0FBd0JkLEdBQUcsQ0FBQ0csSUFBSixDQUFTRyxNQUFqQyxFQUF5Q0osV0FBVyxDQUFDLENBQUQsQ0FBcEQsRUFBeURBLFdBQVcsQ0FBQyxDQUFELENBQXBFLEVBQXlFRixHQUFHLENBQUNHLElBQUosQ0FBU0ksS0FBbEYsQ0FBSixFQUE4RjtBQUM1RixhQUFPTixHQUFHLENBQUNPLElBQUosQ0FBUztBQUFFTyxRQUFBQSxLQUFLLEVBQUU7QUFBVCxPQUFULENBQVA7QUFDRDs7QUFDRCxRQUFJQyxTQUFTLEdBQUcsQ0FBQyxLQUFELEVBQVFuQixNQUFNLENBQUNvQixpQkFBUCxDQUF5QmpCLEdBQUcsQ0FBQ0csSUFBSixDQUFTRyxNQUFsQyxFQUEwQ0osV0FBVyxDQUFDLENBQUQsQ0FBckQsRUFBMERBLFdBQVcsQ0FBQyxDQUFELENBQXJFLEVBQTBFRixHQUFHLENBQUNHLElBQUosQ0FBU0ksS0FBbkYsQ0FBUixDQUFoQjtBQUNBLFFBQUlXLFNBQVMsR0FBRyxDQUFDLFFBQUQsRUFBV3JCLE1BQU0sQ0FBQ3NCLGlCQUFQLENBQXlCbkIsR0FBRyxDQUFDRyxJQUFKLENBQVNHLE1BQWxDLEVBQTBDSixXQUFXLENBQUMsQ0FBRCxDQUFyRCxFQUEwREEsV0FBVyxDQUFDLENBQUQsQ0FBckUsRUFBMEVGLEdBQUcsQ0FBQ0csSUFBSixDQUFTSSxLQUFuRixDQUFYLENBQWhCO0FBQ0EsUUFBSWEsU0FBUyxHQUFHLENBQUMsUUFBRCxFQUFXdkIsTUFBTSxDQUFDd0Isb0JBQVAsQ0FBNEJyQixHQUFHLENBQUNHLElBQUosQ0FBU0csTUFBckMsRUFBNkNKLFdBQVcsQ0FBQyxDQUFELENBQXhELEVBQTZEQSxXQUFXLENBQUMsQ0FBRCxDQUF4RSxFQUE2RUYsR0FBRyxDQUFDRyxJQUFKLENBQVNJLEtBQXRGLENBQVgsQ0FBaEI7QUFDQSxRQUFJZSxNQUFNLEdBQUcsQ0FBQ04sU0FBRCxFQUFZRSxTQUFaLEVBQXVCRSxTQUF2QixFQUFrQ0csTUFBbEMsQ0FBeUNDLENBQUMsSUFBSUEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLEtBQXRELENBQWI7QUFDQWxDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZK0IsTUFBWjtBQUNBLFFBQUlHLFNBQVMsR0FBR0gsTUFBTSxDQUFDSSxHQUFQLENBQVdDLENBQUMsSUFBSUEsQ0FBQyxDQUFDLENBQUQsQ0FBakIsQ0FBaEI7O0FBQ0EsUUFBSUwsTUFBTSxDQUFDWCxNQUFQLEdBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLGFBQU9WLEdBQUcsQ0FBQ08sSUFBSixDQUFTO0FBQUVPLFFBQUFBLEtBQUssRUFBRSxLQUFUO0FBQWdCVSxRQUFBQSxTQUFTLEVBQUVBO0FBQTNCLE9BQVQsQ0FBUDtBQUNEOztBQUNELFdBQU94QixHQUFHLENBQUNPLElBQUosQ0FBUztBQUFFTyxNQUFBQSxLQUFLLEVBQUU7QUFBVCxLQUFULENBQVA7QUFDRCxHQWhDSDtBQWtDQW5CLEVBQUFBLEdBQUcsQ0FBQ0UsS0FBSixDQUFVLFlBQVYsRUFDR0MsSUFESCxDQUNRLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjLENBRW5CLENBSEg7QUFJRCxDQTFDRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZmlubmNqL2NvZGUvZmlubmlhbmovZnJlZWNvZGVjYW1wL3F1YWxpdHlfYXNzdXJhbmNlL3Byb2plY3RzL3N1ZG9rdV9zb2x2ZXIvcm91dGVzLyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3Vkb2t1U29sdmVyID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMvc3Vkb2t1LXNvbHZlci5qcycpO1xuJ3VzZSBzdHJpY3QnO1xubGV0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcblxuLy8gLS0tLS0tLS0tIE1vbmdvIERCIGNvbmZpZyAtLS0tLS0tLS0tLS0tXG5cbm1vbmdvb3NlLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR08sIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLCB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWV9KS50aGVuKCgpID0+IGNvbnNvbGUubG9nKFwiTW9uZ29kYiBjb25uZWN0ZWRcIikpXG4uY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBwKSB7XG5cbiAgbGV0IHNvbHZlciA9IG5ldyBTdWRva3VTb2x2ZXIoKTtcblxuICBhcHAucm91dGUoJy9hcGkvY2hlY2snKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gcmVxLmJvZHkuY29vcmRpbmF0ZS5zcGxpdCgnJylcbiAgICAgIGNvbnNvbGUubG9nKHJlcS5ib2R5KVxuICAgICAgaWYgKHJlcS5ib2R5LnB1enpsZSA9PSAnJyB8fCByZXEuYm9keS5jb29yZGluYXRlID09ICcnIHx8IHJlcS5ib2R5LnZhbHVlID09ICcnKSB7XG4gICAgICAgIHJlcy5qc29uKHsgZXJyb3I6ICdSZXF1aXJlZCBmaWVsZChzKSBtaXNzaW5nJyB9KVxuICAgICAgfVxuICAgICAgaWYgKCFzb2x2ZXIudmFsaWRhdGUocmVxLmJvZHkucHV6emxlKSkge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgY2hhcmFjdGVycyBpbiBwdXp6bGUnIH0pXG4gICAgICB9IGVsc2UgaWYgKHJlcS5ib2R5LnB1enpsZS5sZW5ndGggIT0gODEpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgZXJyb3I6ICdFeHBlY3RlZCBwdXp6bGUgdG8gYmUgODEgY2hhcmFjdGVycyBsb25nJyB9KVxuICAgICAgfVxuXG4gICAgICBpZiAoc29sdmVyLmNoZWNrVmFsaWRDb29yZGluYXRlcyhjb29yZGluYXRlcykgPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIGNvb3JkaW5hdGUnfSlcbiAgICAgIH0gZWxzZSBpZiAoc29sdmVyLmNoZWNrVmFsaWRWYWx1ZShyZXEuYm9keS52YWx1ZSkgPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIHZhbHVlJ30pXG4gICAgICB9XG5cbiAgICAgIGlmIChzb2x2ZXIuY2hlY2tFeGFjdFNxdWFyZShyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7IHZhbGlkOiB0cnVlIH0pXG4gICAgICB9XG4gICAgICBsZXQgdmFsaWRfcm93ID0gW1wicm93XCIsIHNvbHZlci5jaGVja1Jvd1BsYWNlbWVudChyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpXVxuICAgICAgbGV0IHZhbGlkX2NvbCA9IFtcImNvbHVtblwiLCBzb2x2ZXIuY2hlY2tDb2xQbGFjZW1lbnQocmVxLmJvZHkucHV6emxlLCBjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIHJlcS5ib2R5LnZhbHVlKV1cbiAgICAgIGxldCB2YWxpZF9yZWcgPSBbXCJyZWdpb25cIiwgc29sdmVyLmNoZWNrUmVnaW9uUGxhY2VtZW50KHJlcS5ib2R5LnB1enpsZSwgY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzFdLCByZXEuYm9keS52YWx1ZSldXG4gICAgICBsZXQgZXJyb3JzID0gW3ZhbGlkX3JvdywgdmFsaWRfY29sLCB2YWxpZF9yZWddLmZpbHRlcihpID0+IGlbMV0gPT0gZmFsc2UpXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcnMpXG4gICAgICBsZXQgY29uZmxpY3RzID0gZXJyb3JzLm1hcChlID0+IGVbMF0pXG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgdmFsaWQ6IGZhbHNlLCBjb25mbGljdHM6IGNvbmZsaWN0cyB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcy5qc29uKHsgdmFsaWQ6IHRydWUgfSlcbiAgICB9KTtcblxuICBhcHAucm91dGUoJy9hcGkvc29sdmUnKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuXG4gICAgfSk7XG59O1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "coordinates",
        "body",
        "coordinate",
        "split",
        "puzzle",
        "value",
        "json",
        "error",
        "validate",
        "length",
        "checkValidCoordinates",
        "checkValidValue",
        "checkExactSquare",
        "valid",
        "valid_row",
        "checkRowPlacement",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement",
        "errors",
        "filter",
        "i",
        "conflicts",
        "map",
        "e"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let coordinates = req.body.coordinate.split('')\n      console.log(req.body)\n      if (req.body.puzzle == '' || req.body.coordinate == '' || req.body.value == '') {\n        res.json({ error: 'Required field(s) missing' })\n      }\n      if (!solver.validate(req.body.puzzle)) {\n        return res.json({ error: 'Invalid characters in puzzle' })\n      } else if (req.body.puzzle.length != 81) {\n        return res.json({ error: 'Expected puzzle to be 81 characters long' })\n      }\n\n      if (solver.checkValidCoordinates(coordinates) == false) {\n        return res.json({ error: 'Invalid coordinate'})\n      } else if (solver.checkValidValue(req.body.value) == false) {\n        return res.json({ error: 'Invalid value'})\n      }\n\n      if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n        return res.json({ valid: true })\n      }\n      let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false)\n      console.log(errors)\n      let conflicts = errors.map(e => e[0])\n      if (errors.length > 0) {\n        return res.json({ valid: false, conflicts: conflicts })\n      }\n      return res.json({ valid: true })\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681222267146
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkValidCoordinates(coordinates) {\n    let chars = /[A-I]/i;\n    let nums = /[0-9]/;\n\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkValidValue(value) {\n    let nums = /[0-9]/;\n    return nums.test(value);\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = row_letter.toUpperCase().charCodeAt(0) % 65 * 9;\n    let index = row_multiplier + (column - 1);\n    return puzzleString[index] != '.' && puzzleString[index] == value;\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65;\n    console.log(\"Row index: \" + row_index);\n    let row = puzzleString.split('').slice(row_index, row_index + 9);\n    console.log(\"Good row value? \" + !row.some(item => item == value));\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num);\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value));\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i >= row_group * 27 && i < (row_group + 1) * 27);\n    let region = row_extract.filter((_num, i) => {\n      return i % 9 >= col_group * 3 && i % 9 <= (col_group + 1) * 3 - 1;\n    });\n    return !region.some(item => item == value);\n  }\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tWYWxpZENvb3JkaW5hdGVzIiwiY29vcmRpbmF0ZXMiLCJjaGFycyIsIm51bXMiLCJjaGVja1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsImNoZWNrRXhhY3RTcXVhcmUiLCJyb3dfbGV0dGVyIiwiY29sdW1uIiwicm93X211bHRpcGxpZXIiLCJ0b1VwcGVyQ2FzZSIsImNoYXJDb2RlQXQiLCJpbmRleCIsImNoZWNrUm93UGxhY2VtZW50Iiwicm93X2luZGV4IiwiY29uc29sZSIsImxvZyIsInJvdyIsInNwbGl0Iiwic2xpY2UiLCJzb21lIiwiaXRlbSIsImNoZWNrQ29sUGxhY2VtZW50IiwiY29sX251bSIsImFycmF5IiwiY29sX2V4dHJhY3QiLCJmaWx0ZXIiLCJfbnVtIiwiaSIsIm51bSIsImNoZWNrUmVnaW9uUGxhY2VtZW50Iiwicm93X2dyb3VwIiwiTWF0aCIsImZsb29yIiwiY29sX2dyb3VwIiwicm93X2V4dHJhY3QiLCJyZWdpb24iLCJzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQU4sQ0FBbUI7QUFFakJDLEVBQUFBLFFBQVEsQ0FBQ0MsWUFBRCxFQUFlO0FBQ3JCLFFBQUlDLEdBQUcsR0FBRyxXQUFWO0FBQ0EsV0FBT0EsR0FBRyxDQUFDQyxJQUFKLENBQVNGLFlBQVQsQ0FBUDtBQUNEOztBQUVERyxFQUFBQSxxQkFBcUIsQ0FBQ0MsV0FBRCxFQUFjO0FBQ2pDLFFBQUlDLEtBQUssR0FBRyxRQUFaO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLE9BQVg7O0FBQ0EsUUFBSUQsS0FBSyxDQUFDSCxJQUFOLENBQVdFLFdBQVcsQ0FBQyxDQUFELENBQXRCLEtBQThCRSxJQUFJLENBQUNKLElBQUwsQ0FBVUUsV0FBVyxDQUFDLENBQUQsQ0FBckIsQ0FBbEMsRUFB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QUFaO0FBQ0EsUUFBSWlCLFdBQVcsR0FBR1gsS0FBSyxDQUFDRSxNQUFOLENBQWEsQ0FBQ0MsSUFBRCxFQUFPQyxDQUFQLEtBQWNBLENBQUMsSUFBS0csU0FBUyxHQUFHLEVBQWxCLElBQXlCSCxDQUFDLEdBQUksQ0FBQ0csU0FBUyxHQUFHLENBQWIsSUFBa0IsRUFBM0UsQ0FBbEI7QUFDQSxRQUFJSyxNQUFNLEdBQUdELFdBQVcsQ0FBQ1QsTUFBWixDQUFtQixDQUFDQyxJQUFELEVBQU9DLENBQVAsS0FBYTtBQUMzQyxhQUFTQSxDQUFDLEdBQUcsQ0FBTCxJQUFXTSxTQUFTLEdBQUcsQ0FBeEIsSUFBZ0NOLENBQUMsR0FBRyxDQUFMLElBQWEsQ0FBQ00sU0FBUyxHQUFHLENBQWIsSUFBa0IsQ0FBbkIsR0FBd0IsQ0FBMUU7QUFDRCxLQUZZLENBQWI7QUFHQSxXQUFPLENBQUNFLE1BQU0sQ0FBQ2hCLElBQVAsQ0FBYUMsSUFBRCxJQUFVQSxJQUFJLElBQUloQixLQUE5QixDQUFSO0FBQ0Q7O0FBRURnQyxFQUFBQSxLQUFLLENBQUN4QyxZQUFELEVBQWUsQ0FFbkI7O0FBMURnQjs7QUE2RG5CeUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCNUMsWUFBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2Zpbm5jai9jb2RlL2Zpbm5pYW5qL2ZyZWVjb2RlY2FtcC9xdWFsaXR5X2Fzc3VyYW5jZS9wcm9qZWN0cy9zdWRva3Vfc29sdmVyL2NvbnRyb2xsZXJzLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFN1ZG9rdVNvbHZlciB7XG5cbiAgdmFsaWRhdGUocHV6emxlU3RyaW5nKSB7XG4gICAgbGV0IHJlZyA9IC9eW1xcZFxcLl0qJC9cbiAgICByZXR1cm4gcmVnLnRlc3QocHV6emxlU3RyaW5nKVxuICB9XG5cbiAgY2hlY2tWYWxpZENvb3JkaW5hdGVzKGNvb3JkaW5hdGVzKSB7XG4gICAgbGV0IGNoYXJzID0gL1tBLUldL2lcbiAgICBsZXQgbnVtcyA9IC9bMC05XS9cbiAgICBpZiAoY2hhcnMudGVzdChjb29yZGluYXRlc1swXSkgJiYgbnVtcy50ZXN0KGNvb3JkaW5hdGVzWzFdKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBjaGVja1ZhbGlkVmFsdWUodmFsdWUpIHtcbiAgICBsZXQgbnVtcyA9IC9bMC05XS9cbiAgICByZXR1cm4gbnVtcy50ZXN0KHZhbHVlKVxuICB9XG5cbiAgY2hlY2tFeGFjdFNxdWFyZShwdXp6bGVTdHJpbmcsIHJvd19sZXR0ZXIsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICBsZXQgcm93X211bHRpcGxpZXIgPSAocm93X2xldHRlci50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCkgJSA2NSkgKiA5XG4gICAgbGV0IGluZGV4ID0gcm93X211bHRpcGxpZXIgKyAoY29sdW1uIC0gMSlcbiAgICByZXR1cm4gKHB1enpsZVN0cmluZ1tpbmRleF0gIT0gJy4nICYmIHB1enpsZVN0cmluZ1tpbmRleF0gPT0gdmFsdWUpXG4gIH1cblxuICBjaGVja1Jvd1BsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvd19sZXR0ZXIsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICByb3dfbGV0dGVyID0gcm93X2xldHRlci50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMClcbiAgICBsZXQgcm93X2luZGV4ID0gKHJvd19sZXR0ZXIgJSA2NSk7XG4gICAgY29uc29sZS5sb2coXCJSb3cgaW5kZXg6IFwiICsgcm93X2luZGV4KVxuICAgIGxldCByb3cgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpLnNsaWNlKHJvd19pbmRleCwgKHJvd19pbmRleCArIDkpKVxuICAgIGNvbnNvbGUubG9nKFwiR29vZCByb3cgdmFsdWU/IFwiICsgIXJvdy5zb21lKChpdGVtKSA9PiBpdGVtID09IHZhbHVlKSlcbiAgICByZXR1cm4gIXJvdy5zb21lKChpdGVtKSA9PiBpdGVtID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tDb2xQbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3csIGNvbHVtbiwgdmFsdWUpIHtcbiAgICBsZXQgY29sX251bSA9IGNvbHVtbiAtIDFcbiAgICBsZXQgYXJyYXkgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpXG4gICAgbGV0IGNvbF9leHRyYWN0ID0gYXJyYXkuZmlsdGVyKChfbnVtLCBpKSA9PiBpICUgOSA9PSBjb2xfbnVtKVxuICAgIGNvbnNvbGUubG9nKFwiR29vZCBjb2x1bW4gdmFsdWU/IFwiICsgIWNvbF9leHRyYWN0LnNvbWUobnVtID0+IG51bSA9PSB2YWx1ZSkpXG4gICAgcmV0dXJuICFjb2xfZXh0cmFjdC5zb21lKG51bSA9PiBudW0gPT0gdmFsdWUpXG4gIH1cblxuICBjaGVja1JlZ2lvblBsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvd19sZXR0ZXIsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICByb3dfbGV0dGVyID0gcm93X2xldHRlci50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMClcbiAgICBsZXQgcm93X2dyb3VwID0gTWF0aC5mbG9vcigocm93X2xldHRlciAlIDY1KSAvIDMpO1xuICAgIGxldCBjb2xfZ3JvdXAgPSBNYXRoLmZsb29yKChjb2x1bW4gLSAxKSAvIDMpO1xuICAgIGxldCBhcnJheSA9IHB1enpsZVN0cmluZy5zcGxpdCgnJylcbiAgICBsZXQgcm93X2V4dHJhY3QgPSBhcnJheS5maWx0ZXIoKF9udW0sIGkpID0+IChpID49IChyb3dfZ3JvdXAgKiAyNykgJiYgaSA8ICgocm93X2dyb3VwICsgMSkgKiAyNykpKVxuICAgIGxldCByZWdpb24gPSByb3dfZXh0cmFjdC5maWx0ZXIoKF9udW0sIGkpID0+IHtcbiAgICAgIHJldHVybiAoKGkgJSA5KSA+PSBjb2xfZ3JvdXAgKiAzKSAmJiAoKGkgJSA5KSA8PSAoKChjb2xfZ3JvdXAgKyAxKSAqIDMpIC0gMSkpXG4gICAgfSlcbiAgICByZXR1cm4gIXJlZ2lvbi5zb21lKChpdGVtKSA9PiBpdGVtID09IHZhbHVlKVxuICB9XG5cbiAgc29sdmUocHV6emxlU3RyaW5nKSB7XG5cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1ZG9rdVNvbHZlcjtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkValidCoordinates",
        "coordinates",
        "chars",
        "nums",
        "checkValidValue",
        "value",
        "checkExactSquare",
        "row_letter",
        "column",
        "row_multiplier",
        "toUpperCase",
        "charCodeAt",
        "index",
        "checkRowPlacement",
        "row_index",
        "console",
        "log",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "region",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkValidCoordinates(coordinates) {\n    let chars = /[A-I]/i\n    let nums = /[0-9]/\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true\n    }\n    return false\n  }\n\n  checkValidValue(value) {\n    let nums = /[0-9]/\n    return nums.test(value)\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = (row_letter.toUpperCase().charCodeAt(0) % 65) * 9\n    let index = row_multiplier + (column - 1)\n    return (puzzleString[index] != '.' && puzzleString[index] == value)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 9))\n    console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => (i >= (row_group * 27) && i < ((row_group + 1) * 27)))\n    let region = row_extract.filter((_num, i) => {\n      return ((i % 9) >= col_group * 3) && ((i % 9) <= (((col_group + 1) * 3) - 1))\n    })\n    return !region.some((item) => item == value)\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681222311455
  }
}