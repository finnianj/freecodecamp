{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nlet mongoose = require(\"mongoose\");\n\nrequire('dotenv').config(); // --------- Mongo DB config -------------\n\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Mongodb connected\")).catch(err => console.log(err)); // ---------------------------------------\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let coordinates = req.body.coordinate.split('');\n    let valid_row = solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value);\n    let valid_col = solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value);\n    let valid_reg = solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value);\n  });\n  app.route('/api/solve').post((req, res) => {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9uZ29vc2UiLCJjb25maWciLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJzb2x2ZXIiLCJyb3V0ZSIsInBvc3QiLCJyZXEiLCJyZXMiLCJjb29yZGluYXRlcyIsImJvZHkiLCJjb29yZGluYXRlIiwic3BsaXQiLCJ2YWxpZF9yb3ciLCJjaGVja1Jvd1BsYWNlbWVudCIsInB1enpsZSIsInZhbHVlIiwidmFsaWRfY29sIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJ2YWxpZF9yZWciLCJjaGVja1JlZ2lvblBsYWNlbWVudCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsaUNBQUQsQ0FBNUI7O0FBQ0E7O0FBQ0EsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQUEsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkUsTUFBbEIsRyxDQUVBOzs7QUFFQUQsUUFBUSxDQUFDRSxPQUFULENBQWlCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsS0FBN0IsRUFBb0M7QUFBRUMsRUFBQUEsZUFBZSxFQUFFLElBQW5CO0FBQXlCQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUE3QyxDQUFwQyxFQUF3RkMsSUFBeEYsQ0FBNkYsTUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVksbUJBQVosQ0FBbkcsRUFDQ0MsS0FERCxDQUNPQyxHQUFHLElBQUlILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxHQUFaLENBRGQsRSxDQUdBOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlO0FBRTlCLE1BQUlDLE1BQU0sR0FBRyxJQUFJbEIsWUFBSixFQUFiO0FBRUFpQixFQUFBQSxHQUFHLENBQUNFLEtBQUosQ0FBVSxZQUFWLEVBQ0dDLElBREgsQ0FDUSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUNsQixRQUFJQyxXQUFXLEdBQUdGLEdBQUcsQ0FBQ0csSUFBSixDQUFTQyxVQUFULENBQW9CQyxLQUFwQixDQUEwQixFQUExQixDQUFsQjtBQUNBLFFBQUlDLFNBQVMsR0FBR1QsTUFBTSxDQUFDVSxpQkFBUCxDQUF5QlAsR0FBRyxDQUFDRyxJQUFKLENBQVNLLE1BQWxDLEVBQTBDTixXQUFXLENBQUMsQ0FBRCxDQUFyRCxFQUEwREEsV0FBVyxDQUFDLENBQUQsQ0FBckUsRUFBMEVGLEdBQUcsQ0FBQ0csSUFBSixDQUFTTSxLQUFuRixDQUFoQjtBQUNBLFFBQUlDLFNBQVMsR0FBR2IsTUFBTSxDQUFDYyxpQkFBUCxDQUF5QlgsR0FBRyxDQUFDRyxJQUFKLENBQVNLLE1BQWxDLEVBQTBDTixXQUFXLENBQUMsQ0FBRCxDQUFyRCxFQUEwREEsV0FBVyxDQUFDLENBQUQsQ0FBckUsRUFBMEVGLEdBQUcsQ0FBQ0csSUFBSixDQUFTTSxLQUFuRixDQUFoQjtBQUNBLFFBQUlHLFNBQVMsR0FBR2YsTUFBTSxDQUFDZ0Isb0JBQVAsQ0FBNEJiLEdBQUcsQ0FBQ0csSUFBSixDQUFTSyxNQUFyQyxFQUE2Q04sV0FBVyxDQUFDLENBQUQsQ0FBeEQsRUFBNkRBLFdBQVcsQ0FBQyxDQUFELENBQXhFLEVBQTZFRixHQUFHLENBQUNHLElBQUosQ0FBU00sS0FBdEYsQ0FBaEI7QUFDRCxHQU5IO0FBUUFiLEVBQUFBLEdBQUcsQ0FBQ0UsS0FBSixDQUFVLFlBQVYsRUFDR0MsSUFESCxDQUNRLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjLENBRW5CLENBSEg7QUFJRCxDQWhCRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZmlubmNqL2NvZGUvZmlubmlhbmovZnJlZWNvZGVjYW1wL3F1YWxpdHlfYXNzdXJhbmNlL3Byb2plY3RzL3N1ZG9rdV9zb2x2ZXIvcm91dGVzLyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3Vkb2t1U29sdmVyID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMvc3Vkb2t1LXNvbHZlci5qcycpO1xuJ3VzZSBzdHJpY3QnO1xubGV0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcblxuLy8gLS0tLS0tLS0tIE1vbmdvIERCIGNvbmZpZyAtLS0tLS0tLS0tLS0tXG5cbm1vbmdvb3NlLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR08sIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLCB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWV9KS50aGVuKCgpID0+IGNvbnNvbGUubG9nKFwiTW9uZ29kYiBjb25uZWN0ZWRcIikpXG4uY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBwKSB7XG5cbiAgbGV0IHNvbHZlciA9IG5ldyBTdWRva3VTb2x2ZXIoKTtcblxuICBhcHAucm91dGUoJy9hcGkvY2hlY2snKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gcmVxLmJvZHkuY29vcmRpbmF0ZS5zcGxpdCgnJylcbiAgICAgIGxldCB2YWxpZF9yb3cgPSBzb2x2ZXIuY2hlY2tSb3dQbGFjZW1lbnQocmVxLmJvZHkucHV6emxlLCBjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIHJlcS5ib2R5LnZhbHVlKVxuICAgICAgbGV0IHZhbGlkX2NvbCA9IHNvbHZlci5jaGVja0NvbFBsYWNlbWVudChyZXEuYm9keS5wdXp6bGUsIGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgcmVxLmJvZHkudmFsdWUpXG4gICAgICBsZXQgdmFsaWRfcmVnID0gc29sdmVyLmNoZWNrUmVnaW9uUGxhY2VtZW50KHJlcS5ib2R5LnB1enpsZSwgY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzFdLCByZXEuYm9keS52YWx1ZSlcbiAgICB9KTtcblxuICBhcHAucm91dGUoJy9hcGkvc29sdmUnKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuXG4gICAgfSk7XG59O1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "mongoose",
        "config",
        "connect",
        "process",
        "env",
        "MONGO",
        "useNewUrlParser",
        "useUnifiedTopology",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "coordinates",
        "body",
        "coordinate",
        "split",
        "valid_row",
        "checkRowPlacement",
        "puzzle",
        "value",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement"
      ],
      "mappings": "AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iCAAD,CAA5B;;AACA;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBE,MAAlB,G,CAEA;;;AAEAD,QAAQ,CAACE,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,KAA7B,EAAoC;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAApC,EAAwFC,IAAxF,CAA6F,MAAMC,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAnG,EACCC,KADD,CACOC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CADd,E,CAGA;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAE9B,MAAIC,MAAM,GAAG,IAAIlB,YAAJ,EAAb;AAEAiB,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClB,QAAIC,WAAW,GAAGF,GAAG,CAACG,IAAJ,CAASC,UAAT,CAAoBC,KAApB,CAA0B,EAA1B,CAAlB;AACA,QAAIC,SAAS,GAAGT,MAAM,CAACU,iBAAP,CAAyBP,GAAG,CAACG,IAAJ,CAASK,MAAlC,EAA0CN,WAAW,CAAC,CAAD,CAArD,EAA0DA,WAAW,CAAC,CAAD,CAArE,EAA0EF,GAAG,CAACG,IAAJ,CAASM,KAAnF,CAAhB;AACA,QAAIC,SAAS,GAAGb,MAAM,CAACc,iBAAP,CAAyBX,GAAG,CAACG,IAAJ,CAASK,MAAlC,EAA0CN,WAAW,CAAC,CAAD,CAArD,EAA0DA,WAAW,CAAC,CAAD,CAArE,EAA0EF,GAAG,CAACG,IAAJ,CAASM,KAAnF,CAAhB;AACA,QAAIG,SAAS,GAAGf,MAAM,CAACgB,oBAAP,CAA4Bb,GAAG,CAACG,IAAJ,CAASK,MAArC,EAA6CN,WAAW,CAAC,CAAD,CAAxD,EAA6DA,WAAW,CAAC,CAAD,CAAxE,EAA6EF,GAAG,CAACG,IAAJ,CAASM,KAAtF,CAAhB;AACD,GANH;AAQAb,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc,CAEnB,CAHH;AAID,CAhBD",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nlet mongoose = require(\"mongoose\")\nrequire('dotenv').config();\n\n// --------- Mongo DB config -------------\n\nmongoose.connect(process.env.MONGO, { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log(\"Mongodb connected\"))\n.catch(err => console.log(err));\n\n// ---------------------------------------\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let coordinates = req.body.coordinate.split('')\n      let valid_row = solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)\n      let valid_col = solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)\n      let valid_reg = solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681204858386
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65;\n    console.log(\"Row index: \" + row_index);\n    let row = puzzleString.split('').slice(row_index, row_index + 10);\n    console.log(\"Good row value? \" + !row.some(item => item == value));\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num);\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value));\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    console.log(\"Row group: \" + row_group);\n    let col_group = Math.floor((column - 1) / 3);\n    console.log(\"Col group: \" + col_group);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i % 9 == col_num);\n  }\n\n  solve(puzzleString) {}\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwidmFsaWRhdGUiLCJwdXp6bGVTdHJpbmciLCJyZWciLCJ0ZXN0IiwiY2hlY2tSb3dQbGFjZW1lbnQiLCJyb3dfbGV0dGVyIiwiY29sdW1uIiwidmFsdWUiLCJ0b1VwcGVyQ2FzZSIsImNoYXJDb2RlQXQiLCJyb3dfaW5kZXgiLCJjb25zb2xlIiwibG9nIiwicm93Iiwic3BsaXQiLCJzbGljZSIsInNvbWUiLCJpdGVtIiwiY2hlY2tDb2xQbGFjZW1lbnQiLCJjb2xfbnVtIiwiYXJyYXkiLCJjb2xfZXh0cmFjdCIsImZpbHRlciIsIl9udW0iLCJpIiwibnVtIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJyb3dfZ3JvdXAiLCJNYXRoIiwiZmxvb3IiLCJjb2xfZ3JvdXAiLCJyb3dfZXh0cmFjdCIsInNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsWUFBTixDQUFtQjtBQUVqQkMsRUFBQUEsUUFBUSxDQUFDQyxZQUFELEVBQWU7QUFDckIsUUFBSUMsR0FBRyxHQUFHLFlBQVY7QUFDQSxXQUFPQSxHQUFHLENBQUNDLElBQUosQ0FBU0YsWUFBVCxDQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLGlCQUFpQixDQUFDSCxZQUFELEVBQWVJLFVBQWYsRUFBMkJDLE1BQTNCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUN6REYsSUFBQUEsVUFBVSxHQUFHQSxVQUFVLENBQUNHLFdBQVgsR0FBeUJDLFVBQXpCLENBQW9DLENBQXBDLENBQWI7QUFDQSxRQUFJQyxTQUFTLEdBQUlMLFVBQVUsR0FBRyxFQUE5QjtBQUNBTSxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxnQkFBZ0JGLFNBQTVCO0FBQ0EsUUFBSUcsR0FBRyxHQUFHWixZQUFZLENBQUNhLEtBQWIsQ0FBbUIsRUFBbkIsRUFBdUJDLEtBQXZCLENBQTZCTCxTQUE3QixFQUF5Q0EsU0FBUyxHQUFHLEVBQXJELENBQVY7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQXFCLENBQUNDLEdBQUcsQ0FBQ0csSUFBSixDQUFVQyxJQUFELElBQVVBLElBQUksSUFBSVYsS0FBM0IsQ0FBbEM7QUFDQSxXQUFPLENBQUNNLEdBQUcsQ0FBQ0csSUFBSixDQUFVQyxJQUFELElBQVVBLElBQUksSUFBSVYsS0FBM0IsQ0FBUjtBQUNEOztBQUVEVyxFQUFBQSxpQkFBaUIsQ0FBQ2pCLFlBQUQsRUFBZVksR0FBZixFQUFvQlAsTUFBcEIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2xELFFBQUlZLE9BQU8sR0FBR2IsTUFBTSxHQUFHLENBQXZCO0FBQ0EsUUFBSWMsS0FBSyxHQUFHbkIsWUFBWSxDQUFDYSxLQUFiLENBQW1CLEVBQW5CLENBQVo7QUFDQSxRQUFJTyxXQUFXLEdBQUdELEtBQUssQ0FBQ0UsTUFBTixDQUFhLENBQUNDLElBQUQsRUFBT0MsQ0FBUCxLQUFhQSxDQUFDLEdBQUcsQ0FBSixJQUFTTCxPQUFuQyxDQUFsQjtBQUNBUixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBd0IsQ0FBQ1MsV0FBVyxDQUFDTCxJQUFaLENBQWlCUyxHQUFHLElBQUlBLEdBQUcsSUFBSWxCLEtBQS9CLENBQXJDO0FBQ0EsV0FBTyxDQUFDYyxXQUFXLENBQUNMLElBQVosQ0FBaUJTLEdBQUcsSUFBSUEsR0FBRyxJQUFJbEIsS0FBL0IsQ0FBUjtBQUNEOztBQUVEbUIsRUFBQUEsb0JBQW9CLENBQUN6QixZQUFELEVBQWVJLFVBQWYsRUFBMkJDLE1BQTNCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUM1REYsSUFBQUEsVUFBVSxHQUFHQSxVQUFVLENBQUNHLFdBQVgsR0FBeUJDLFVBQXpCLENBQW9DLENBQXBDLENBQWI7QUFDQSxRQUFJa0IsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBWXhCLFVBQVUsR0FBRyxFQUFkLEdBQW9CLENBQS9CLENBQWhCO0FBQ0FNLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGdCQUFnQmUsU0FBNUI7QUFDQSxRQUFJRyxTQUFTLEdBQUdGLElBQUksQ0FBQ0MsS0FBTCxDQUFXLENBQUN2QixNQUFNLEdBQUcsQ0FBVixJQUFlLENBQTFCLENBQWhCO0FBQ0FLLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGdCQUFnQmtCLFNBQTVCO0FBQ0EsUUFBSVYsS0FBSyxHQUFHbkIsWUFBWSxDQUFDYSxLQUFiLENBQW1CLEVBQW5CLENBQVo7QUFDQSxRQUFJaUIsV0FBVyxHQUFHWCxLQUFLLENBQUNFLE1BQU4sQ0FBYSxDQUFDQyxJQUFELEVBQU9DLENBQVAsS0FBYUEsQ0FBQyxHQUFHLENBQUosSUFBU0wsT0FBbkMsQ0FBbEI7QUFHRDs7QUFFRGEsRUFBQUEsS0FBSyxDQUFDL0IsWUFBRCxFQUFlLENBRW5COztBQXRDZ0I7O0FBeUNuQmdDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQm5DLFlBQWpCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9maW5uY2ovY29kZS9maW5uaWFuai9mcmVlY29kZWNhbXAvcXVhbGl0eV9hc3N1cmFuY2UvcHJvamVjdHMvc3Vkb2t1X3NvbHZlci9jb250cm9sbGVycy8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTdWRva3VTb2x2ZXIge1xuXG4gIHZhbGlkYXRlKHB1enpsZVN0cmluZykge1xuICAgIGxldCByZWcgPSAvXltcXGRcXC4vXSokL1xuICAgIHJldHVybiByZWcudGVzdChwdXp6bGVTdHJpbmcpXG4gIH1cblxuICBjaGVja1Jvd1BsYWNlbWVudChwdXp6bGVTdHJpbmcsIHJvd19sZXR0ZXIsIGNvbHVtbiwgdmFsdWUpIHtcbiAgICByb3dfbGV0dGVyID0gcm93X2xldHRlci50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMClcbiAgICBsZXQgcm93X2luZGV4ID0gKHJvd19sZXR0ZXIgJSA2NSk7XG4gICAgY29uc29sZS5sb2coXCJSb3cgaW5kZXg6IFwiICsgcm93X2luZGV4KVxuICAgIGxldCByb3cgPSBwdXp6bGVTdHJpbmcuc3BsaXQoJycpLnNsaWNlKHJvd19pbmRleCwgKHJvd19pbmRleCArIDEwKSlcbiAgICBjb25zb2xlLmxvZyhcIkdvb2Qgcm93IHZhbHVlPyBcIiArICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSkpXG4gICAgcmV0dXJuICFyb3cuc29tZSgoaXRlbSkgPT4gaXRlbSA9PSB2YWx1ZSlcbiAgfVxuXG4gIGNoZWNrQ29sUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93LCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgbGV0IGNvbF9udW0gPSBjb2x1bW4gLSAxXG4gICAgbGV0IGFycmF5ID0gcHV6emxlU3RyaW5nLnNwbGl0KCcnKVxuICAgIGxldCBjb2xfZXh0cmFjdCA9IGFycmF5LmZpbHRlcigoX251bSwgaSkgPT4gaSAlIDkgPT0gY29sX251bSlcbiAgICBjb25zb2xlLmxvZyhcIkdvb2QgY29sdW1uIHZhbHVlPyBcIiArICFjb2xfZXh0cmFjdC5zb21lKG51bSA9PiBudW0gPT0gdmFsdWUpKVxuICAgIHJldHVybiAhY29sX2V4dHJhY3Quc29tZShudW0gPT4gbnVtID09IHZhbHVlKVxuICB9XG5cbiAgY2hlY2tSZWdpb25QbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3dfbGV0dGVyLCBjb2x1bW4sIHZhbHVlKSB7XG4gICAgcm93X2xldHRlciA9IHJvd19sZXR0ZXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXG4gICAgbGV0IHJvd19ncm91cCA9IE1hdGguZmxvb3IoKHJvd19sZXR0ZXIgJSA2NSkgLyAzKTtcbiAgICBjb25zb2xlLmxvZyhcIlJvdyBncm91cDogXCIgKyByb3dfZ3JvdXApXG4gICAgbGV0IGNvbF9ncm91cCA9IE1hdGguZmxvb3IoKGNvbHVtbiAtIDEpIC8gMyk7XG4gICAgY29uc29sZS5sb2coXCJDb2wgZ3JvdXA6IFwiICsgY29sX2dyb3VwKVxuICAgIGxldCBhcnJheSA9IHB1enpsZVN0cmluZy5zcGxpdCgnJylcbiAgICBsZXQgcm93X2V4dHJhY3QgPSBhcnJheS5maWx0ZXIoKF9udW0sIGkpID0+IGkgJSA5ID09IGNvbF9udW0pXG5cblxuICB9XG5cbiAgc29sdmUocHV6emxlU3RyaW5nKSB7XG5cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1ZG9rdVNvbHZlcjtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkRowPlacement",
        "row_letter",
        "column",
        "value",
        "toUpperCase",
        "charCodeAt",
        "row_index",
        "console",
        "log",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,YAAN,CAAmB;AAEjBC,EAAAA,QAAQ,CAACC,YAAD,EAAe;AACrB,QAAIC,GAAG,GAAG,YAAV;AACA,WAAOA,GAAG,CAACC,IAAJ,CAASF,YAAT,CAAP;AACD;;AAEDG,EAAAA,iBAAiB,CAACH,YAAD,EAAeI,UAAf,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AACzDF,IAAAA,UAAU,GAAGA,UAAU,CAACG,WAAX,GAAyBC,UAAzB,CAAoC,CAApC,CAAb;AACA,QAAIC,SAAS,GAAIL,UAAU,GAAG,EAA9B;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,SAA5B;AACA,QAAIG,GAAG,GAAGZ,YAAY,CAACa,KAAb,CAAmB,EAAnB,EAAuBC,KAAvB,CAA6BL,SAA7B,EAAyCA,SAAS,GAAG,EAArD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,CAACC,GAAG,CAACG,IAAJ,CAAUC,IAAD,IAAUA,IAAI,IAAIV,KAA3B,CAAlC;AACA,WAAO,CAACM,GAAG,CAACG,IAAJ,CAAUC,IAAD,IAAUA,IAAI,IAAIV,KAA3B,CAAR;AACD;;AAEDW,EAAAA,iBAAiB,CAACjB,YAAD,EAAeY,GAAf,EAAoBP,MAApB,EAA4BC,KAA5B,EAAmC;AAClD,QAAIY,OAAO,GAAGb,MAAM,GAAG,CAAvB;AACA,QAAIc,KAAK,GAAGnB,YAAY,CAACa,KAAb,CAAmB,EAAnB,CAAZ;AACA,QAAIO,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,IAAD,EAAOC,CAAP,KAAaA,CAAC,GAAG,CAAJ,IAASL,OAAnC,CAAlB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwB,CAACS,WAAW,CAACL,IAAZ,CAAiBS,GAAG,IAAIA,GAAG,IAAIlB,KAA/B,CAArC;AACA,WAAO,CAACc,WAAW,CAACL,IAAZ,CAAiBS,GAAG,IAAIA,GAAG,IAAIlB,KAA/B,CAAR;AACD;;AAEDmB,EAAAA,oBAAoB,CAACzB,YAAD,EAAeI,UAAf,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AAC5DF,IAAAA,UAAU,GAAGA,UAAU,CAACG,WAAX,GAAyBC,UAAzB,CAAoC,CAApC,CAAb;AACA,QAAIkB,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAYxB,UAAU,GAAG,EAAd,GAAoB,CAA/B,CAAhB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBe,SAA5B;AACA,QAAIG,SAAS,GAAGF,IAAI,CAACC,KAAL,CAAW,CAACvB,MAAM,GAAG,CAAV,IAAe,CAA1B,CAAhB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBkB,SAA5B;AACA,QAAIV,KAAK,GAAGnB,YAAY,CAACa,KAAb,CAAmB,EAAnB,CAAZ;AACA,QAAIiB,WAAW,GAAGX,KAAK,CAACE,MAAN,CAAa,CAACC,IAAD,EAAOC,CAAP,KAAaA,CAAC,GAAG,CAAJ,IAASL,OAAnC,CAAlB;AAGD;;AAEDa,EAAAA,KAAK,CAAC/B,YAAD,EAAe,CAEnB;;AAtCgB;;AAyCnBgC,MAAM,CAACC,OAAP,GAAiBnC,YAAjB",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\./]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 10))\n    console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    console.log(\"Row group: \" + row_group)\n    let col_group = Math.floor((column - 1) / 3);\n    console.log(\"Col group: \" + col_group)\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => i % 9 == col_num)\n\n\n  }\n\n  solve(puzzleString) {\n\n  }\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681205538175
  }
}