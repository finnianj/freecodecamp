{
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\n'use strict';\n\nrequire('dotenv').config();\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    console.log(\"\\n\\n\");\n    console.log(req.body);\n    console.log(req.body.coordinate);\n\n    if (!req.body.puzzle || !req.body.coordinate || !req.body.value) {\n      console.log('Required field(s) missing');\n      return res.json({\n        error: 'Required field(s) missing'\n      });\n    }\n\n    let coordinates = req.body.coordinate.split('');\n\n    if (!solver.validate(req.body.puzzle)) {\n      console.log('Invalid characters in puzzle');\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    } else if (req.body.puzzle.length != 81) {\n      console.log('Expected puzzle to be 81 characters long');\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    if (solver.checkValidCoordinates(coordinates) == false) {\n      console.log('Invalid coordinate');\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    } else if (solver.checkValidValue(req.body.value) == false) {\n      console.log('Invalid valid');\n      return res.json({\n        error: 'Invalid value'\n      });\n    }\n\n    if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n      return res.json({\n        valid: true\n      });\n    }\n\n    let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)];\n    let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false);\n    console.log(errors);\n    let conflicts = errors.map(e => e[0]);\n\n    if (errors.length > 0) {\n      return res.json({\n        valid: false,\n        conflict: conflicts\n      });\n    }\n\n    return res.json({\n      valid: true\n    });\n  });\n  app.route('/api/solve').post((req, res) => {\n    if (!req.body.puzzle) {\n      console.log('Required field(s) missing');\n      return res.json({\n        error: 'Required field missing'\n      });\n    }\n\n    if (!solver.validate(req.body.puzzle)) {\n      console.log('Invalid characters in puzzle');\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    } else if (req.body.puzzle.length != 81) {\n      console.log('Expected puzzle to be 81 characters long');\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    let solution = solver.solve(req.body.puzzle);\n    return res.json(solution);\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "config",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "console",
        "log",
        "body",
        "coordinate",
        "puzzle",
        "value",
        "json",
        "error",
        "coordinates",
        "split",
        "validate",
        "length",
        "checkValidCoordinates",
        "checkValidValue",
        "checkExactSquare",
        "valid",
        "valid_row",
        "checkRowPlacement",
        "valid_col",
        "checkColPlacement",
        "valid_reg",
        "checkRegionPlacement",
        "errors",
        "filter",
        "i",
        "conflicts",
        "map",
        "e",
        "conflict",
        "solution",
        "solve"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/routes/",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n'use strict';\nrequire('dotenv').config();\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      console.log(\"\\n\\n\")\n      console.log(req.body)\n      console.log(req.body.coordinate)\n      if ( !req.body.puzzle || !req.body.coordinate || !req.body.value ) {\n        console.log('Required field(s) missing')\n        return res.json({ error: 'Required field(s) missing' })\n      }\n      let coordinates = req.body.coordinate.split('')\n      if (!solver.validate(req.body.puzzle)) {\n        console.log('Invalid characters in puzzle')\n        return res.json({ error: 'Invalid characters in puzzle' })\n      } else if (req.body.puzzle.length != 81) {\n        console.log('Expected puzzle to be 81 characters long')\n        return res.json({ error: 'Expected puzzle to be 81 characters long' })\n      }\n\n      if (solver.checkValidCoordinates(coordinates) == false) {\n        console.log('Invalid coordinate')\n        return res.json({ error: 'Invalid coordinate'})\n      } else if (solver.checkValidValue(req.body.value) == false) {\n        console.log('Invalid valid')\n        return res.json({ error: 'Invalid value'})\n      }\n\n      if (solver.checkExactSquare(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)) {\n        return res.json({ valid: true })\n      }\n      let valid_row = [\"row\", solver.checkRowPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_col = [\"column\", solver.checkColPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let valid_reg = [\"region\", solver.checkRegionPlacement(req.body.puzzle, coordinates[0], coordinates[1], req.body.value)]\n      let errors = [valid_row, valid_col, valid_reg].filter(i => i[1] == false)\n      console.log(errors)\n      let conflicts = errors.map(e => e[0])\n      if (errors.length > 0) {\n        return res.json({ valid: false, conflict: conflicts })\n      }\n      return res.json({ valid: true })\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n      if ( !req.body.puzzle ) {\n        console.log('Required field(s) missing')\n        return res.json({ error: 'Required field missing' })\n      }\n\n      if (!solver.validate(req.body.puzzle)) {\n        console.log('Invalid characters in puzzle')\n        return res.json({ error: 'Invalid characters in puzzle' })\n      } else if (req.body.puzzle.length != 81) {\n        console.log('Expected puzzle to be 81 characters long')\n        return res.json({ error: 'Expected puzzle to be 81 characters long' })\n      }\n      let solution = solver.solve(req.body.puzzle)\n      return res.json(solution)\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681307480404
  },
  "{\"sourceRoot\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"filename\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "class SudokuSolver {\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/;\n    return reg.test(puzzleString);\n  }\n\n  checkValidCoordinates(coordinates) {\n    if (coordinates.length > 2) return false;\n    let chars = /[A-I]/i;\n    let nums = /[1-9]/;\n\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkValidValue(value) {\n    if (value.length > 1) return false;\n    let nums = /[1-9]/;\n    return nums.test(value);\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = row_letter.toUpperCase().charCodeAt(0) % 65 * 9;\n    let index = row_multiplier + (column - 1);\n    return puzzleString[index] != '.' && puzzleString[index] == value;\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_index = row_letter % 65; // console.log(\"Row index: \" + row_index)\n\n    let row = puzzleString.split('').slice(row_index, row_index + 9); // console.log(\"Good row value? \" + !row.some((item) => item == value))\n\n    return !row.some(item => item == value);\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1;\n    let array = puzzleString.split('');\n    let col_extract = array.filter((_num, i) => i % 9 == col_num); // console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n\n    return !col_extract.some(num => num == value);\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0);\n    let row_group = Math.floor(row_letter % 65 / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('');\n    let row_extract = array.filter((_num, i) => i >= row_group * 27 && i < (row_group + 1) * 27);\n    let region = row_extract.filter((_num, i) => {\n      return i % 9 >= col_group * 3 && i % 9 <= (col_group + 1) * 3 - 1;\n    });\n    return !region.some(item => item == value);\n  }\n\n  solve(puzzleString) {\n    let grid = this.transform(puzzleString);\n    let solved = this.solveSudoku(grid, 0, 0);\n    if (!solved) return {\n      error: 'Puzzle cannot be solved'\n    };\n    let solvedString = solved.flat().join(\"\");\n    return {\n      solution: solvedString\n    };\n  }\n\n  solveSudoku(grid, row, col) {\n    if (row == 9 - 1 && col == 9) return grid;\n\n    if (col == 9) {\n      row++;\n      col = 0;\n    }\n\n    if (grid[row][col] != 0) return this.solveSudoku(grid, row, col + 1);\n\n    for (let num = 1; num < 10; num++) {\n      if (this.isSafe(grid, row, col, num)) {\n        grid[row][col] = num;\n        if (this.solveSudoku(grid, row, col + 1)) return grid;\n      }\n\n      grid[row][col] = 0;\n    }\n\n    return false;\n  }\n\n  isSafe(grid, row, col, num) {\n    for (let x = 0; x <= 8; x++) if (grid[row][x] == num) return false;\n\n    for (let x = 0; x <= 8; x++) if (grid[x][col] == num) return false;\n\n    let startRow = row - row % 3,\n        startCol = col - col % 3;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (grid[i + startRow][j + startCol] == num) return false;\n      }\n    }\n\n    return true;\n  }\n\n  transform(puzzleString) {\n    let grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n    let row = -1;\n    let col = 0;\n\n    for (let i = 0; i < puzzleString.length; i++) {\n      if (i % 9 == 0) {\n        row++;\n      }\n\n      if (col % 9 == 0) {\n        col = 0;\n      }\n\n      grid[row][col] = puzzleString[i] === '.' ? 0 : +puzzleString[i];\n      col++;\n    }\n\n    return grid;\n  }\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "validate",
        "puzzleString",
        "reg",
        "test",
        "checkValidCoordinates",
        "coordinates",
        "length",
        "chars",
        "nums",
        "checkValidValue",
        "value",
        "checkExactSquare",
        "row_letter",
        "column",
        "row_multiplier",
        "toUpperCase",
        "charCodeAt",
        "index",
        "checkRowPlacement",
        "row_index",
        "row",
        "split",
        "slice",
        "some",
        "item",
        "checkColPlacement",
        "col_num",
        "array",
        "col_extract",
        "filter",
        "_num",
        "i",
        "num",
        "checkRegionPlacement",
        "row_group",
        "Math",
        "floor",
        "col_group",
        "row_extract",
        "region",
        "solve",
        "grid",
        "transform",
        "solved",
        "solveSudoku",
        "error",
        "solvedString",
        "flat",
        "join",
        "solution",
        "col",
        "isSafe",
        "x",
        "startRow",
        "startCol",
        "j",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/finncj/code/finnianj/freecodecamp/quality_assurance/projects/sudoku_solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    let reg = /^[\\d\\.]*$/\n    return reg.test(puzzleString)\n  }\n\n  checkValidCoordinates(coordinates) {\n    if (coordinates.length > 2) return false\n    let chars = /[A-I]/i\n    let nums = /[1-9]/\n    if (chars.test(coordinates[0]) && nums.test(coordinates[1])) {\n      return true\n    }\n    return false\n  }\n\n  checkValidValue(value) {\n    if (value.length > 1) return false\n    let nums = /[1-9]/\n    return nums.test(value)\n  }\n\n  checkExactSquare(puzzleString, row_letter, column, value) {\n    let row_multiplier = (row_letter.toUpperCase().charCodeAt(0) % 65) * 9\n    let index = row_multiplier + (column - 1)\n    return (puzzleString[index] != '.' && puzzleString[index] == value)\n  }\n\n  checkRowPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_index = (row_letter % 65);\n    // console.log(\"Row index: \" + row_index)\n    let row = puzzleString.split('').slice(row_index, (row_index + 9))\n    // console.log(\"Good row value? \" + !row.some((item) => item == value))\n    return !row.some((item) => item == value)\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let col_num = column - 1\n    let array = puzzleString.split('')\n    let col_extract = array.filter((_num, i) => i % 9 == col_num)\n    // console.log(\"Good column value? \" + !col_extract.some(num => num == value))\n    return !col_extract.some(num => num == value)\n  }\n\n  checkRegionPlacement(puzzleString, row_letter, column, value) {\n    row_letter = row_letter.toUpperCase().charCodeAt(0)\n    let row_group = Math.floor((row_letter % 65) / 3);\n    let col_group = Math.floor((column - 1) / 3);\n    let array = puzzleString.split('')\n    let row_extract = array.filter((_num, i) => (i >= (row_group * 27) && i < ((row_group + 1) * 27)))\n    let region = row_extract.filter((_num, i) => {\n      return ((i % 9) >= col_group * 3) && ((i % 9) <= (((col_group + 1) * 3) - 1))\n    })\n    return !region.some((item) => item == value)\n  }\n\n  solve(puzzleString) {\n    let grid = this.transform(puzzleString)\n    let solved = this.solveSudoku(grid, 0, 0)\n    if (!solved) return { error: 'Puzzle cannot be solved' }\n    let solvedString = solved.flat().join(\"\")\n    return { solution: solvedString }\n  }\n\n  solveSudoku(grid, row, col) {\n    if (row == 9 - 1 && col == 9) return grid\n    if (col == 9) {\n      row++;\n      col = 0;\n    }\n\n    if (grid[row][col] != 0) return this.solveSudoku(grid, row, col + 1);\n\n    for (let num = 1; num < 10; num++) {\n\n      if (this.isSafe(grid, row, col, num)) {\n        grid[row][col] = num;\n        if (this.solveSudoku(grid, row, col + 1)) return grid\n      }\n\n      grid[row][col] = 0;\n    }\n    return false\n  }\n\n  isSafe(grid, row, col, num) {\n\n    for(let x = 0; x <= 8; x++) if (grid[row][x] == num) return false\n    for(let x = 0; x <= 8; x++) if (grid[x][col] == num) return false\n\n    let startRow = row - (row % 3),\n      startCol = col - (col % 3)\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (grid[i + startRow][j + startCol] == num) return false\n      }\n    }\n    return true\n  }\n\n  transform(puzzleString) {\n    let grid = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ];\n    let row = -1\n    let col = 0\n\n    for (let i = 0; i < puzzleString.length; i ++) {\n      if (i % 9 == 0) {\n        row++\n      }\n      if (col % 9 == 0) {\n        col = 0;\n      }\n\n      grid[row][col] = puzzleString[i] === '.' ? 0 : +puzzleString[i];\n      col++;\n    }\n    return grid;\n  }\n\n}\n\nmodule.exports = SudokuSolver;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1681307258787
  }
}